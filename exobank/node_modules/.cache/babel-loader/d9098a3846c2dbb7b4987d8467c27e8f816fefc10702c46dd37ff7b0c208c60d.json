{"ast":null,"code":"import axios from \"axios\";\nimport { ULR_DEPOSITO, ULR_INSERT_TRANSAZIONE, ULR__FIND_CONTO_UTENTE, URL_INSERT_CONTO, URL_LISTA_TRANSAZIONI_UTENTE, URL_LOGIN, URL_REGISTRAZIONE } from \"../utility/Endpoint\";\n\n/*async: Questa parola chiave viene utilizzata prima di una funzione per dichiararla come asincrona.\r\n Le funzioni asincrone possono contenere l'operatore await. Quando una funzione è dichiarata come asincrona, \r\n questa restituirà sempre una promessa implicitamente.\r\n\r\nawait: Questa parola chiave può essere utilizzata all'interno di una funzione asincrona per \"attendere\" il completamento di una promessa.\r\n Quando si utilizza await su una promessa, la funzione asincrona si \"blocca\" finché la promessa non viene risolta o rigettata. \r\n Questo consente di scrivere codice asincrono in uno stile più simile al codice sincrono.\r\n*/\n\nconst headers = {\n  headers: {\n    'Accept': '/',\n    'Content-Type': 'application/json'\n  }\n};\nexport async function utenteLogin(utente) {\n  return await axios.post(URL_LOGIN, utente);\n}\nexport async function insertConto(utente) {\n  return await axios.post(URL_INSERT_CONTO, utente);\n}\nexport async function registrazione(utente) {\n  return await axios.post(URL_REGISTRAZIONE, utente);\n}\nexport async function findContoUtente(utente) {\n  return await axios.post(ULR__FIND_CONTO_UTENTE, utente);\n}\nexport async function insertTransazione(transazione) {\n  findTransazioniUtente;\n  return await axios.post(ULR_INSERT_TRANSAZIONE, transazione);\n}\nexport async function listaTransazioniUtente(utente) {\n  return await axios.post(URL_LISTA_TRANSAZIONI_UTENTE, utente);\n}","map":{"version":3,"names":["axios","ULR_DEPOSITO","ULR_INSERT_TRANSAZIONE","ULR__FIND_CONTO_UTENTE","URL_INSERT_CONTO","URL_LISTA_TRANSAZIONI_UTENTE","URL_LOGIN","URL_REGISTRAZIONE","headers","utenteLogin","utente","post","insertConto","registrazione","findContoUtente","insertTransazione","transazione","findTransazioniUtente","listaTransazioniUtente"],"sources":["C:/Sviluppo/react/exobank/src/service/utenteService.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { ULR_DEPOSITO, ULR_INSERT_TRANSAZIONE, ULR__FIND_CONTO_UTENTE, URL_INSERT_CONTO, URL_LISTA_TRANSAZIONI_UTENTE, URL_LOGIN, URL_REGISTRAZIONE } from \"../utility/Endpoint\"\r\n\r\n/*async: Questa parola chiave viene utilizzata prima di una funzione per dichiararla come asincrona.\r\n Le funzioni asincrone possono contenere l'operatore await. Quando una funzione è dichiarata come asincrona, \r\n questa restituirà sempre una promessa implicitamente.\r\n\r\nawait: Questa parola chiave può essere utilizzata all'interno di una funzione asincrona per \"attendere\" il completamento di una promessa.\r\n Quando si utilizza await su una promessa, la funzione asincrona si \"blocca\" finché la promessa non viene risolta o rigettata. \r\n Questo consente di scrivere codice asincrono in uno stile più simile al codice sincrono.\r\n*/\r\n\r\nconst headers = {headers: {'Accept': '/', 'Content-Type': 'application/json'}};\r\n\r\nexport async function utenteLogin(utente){\r\n    return await axios.post(URL_LOGIN,utente)\r\n}\r\nexport async function insertConto(utente){\r\n    return await axios.post(URL_INSERT_CONTO,utente)\r\n}\r\nexport async function registrazione(utente){\r\n    return await axios.post(URL_REGISTRAZIONE,utente)\r\n}\r\nexport async function findContoUtente(utente){\r\n    return await axios.post(ULR__FIND_CONTO_UTENTE,utente)\r\n}\r\nexport async function insertTransazione(transazione){findTransazioniUtente\r\n    return await axios.post(ULR_INSERT_TRANSAZIONE,transazione)\r\n}\r\nexport async function listaTransazioniUtente(utente){\r\n    return await axios.post(URL_LISTA_TRANSAZIONI_UTENTE,utente)\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,sBAAsB,EAAEC,sBAAsB,EAAEC,gBAAgB,EAAEC,4BAA4B,EAAEC,SAAS,EAAEC,iBAAiB,QAAQ,qBAAqB;;AAEhL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG;EAACA,OAAO,EAAE;IAAC,QAAQ,EAAE,GAAG;IAAE,cAAc,EAAE;EAAkB;AAAC,CAAC;AAE9E,OAAO,eAAeC,WAAWA,CAACC,MAAM,EAAC;EACrC,OAAO,MAAMV,KAAK,CAACW,IAAI,CAACL,SAAS,EAACI,MAAM,CAAC;AAC7C;AACA,OAAO,eAAeE,WAAWA,CAACF,MAAM,EAAC;EACrC,OAAO,MAAMV,KAAK,CAACW,IAAI,CAACP,gBAAgB,EAACM,MAAM,CAAC;AACpD;AACA,OAAO,eAAeG,aAAaA,CAACH,MAAM,EAAC;EACvC,OAAO,MAAMV,KAAK,CAACW,IAAI,CAACJ,iBAAiB,EAACG,MAAM,CAAC;AACrD;AACA,OAAO,eAAeI,eAAeA,CAACJ,MAAM,EAAC;EACzC,OAAO,MAAMV,KAAK,CAACW,IAAI,CAACR,sBAAsB,EAACO,MAAM,CAAC;AAC1D;AACA,OAAO,eAAeK,iBAAiBA,CAACC,WAAW,EAAC;EAACC,qBAAqB;EACtE,OAAO,MAAMjB,KAAK,CAACW,IAAI,CAACT,sBAAsB,EAACc,WAAW,CAAC;AAC/D;AACA,OAAO,eAAeE,sBAAsBA,CAACR,MAAM,EAAC;EAChD,OAAO,MAAMV,KAAK,CAACW,IAAI,CAACN,4BAA4B,EAACK,MAAM,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}