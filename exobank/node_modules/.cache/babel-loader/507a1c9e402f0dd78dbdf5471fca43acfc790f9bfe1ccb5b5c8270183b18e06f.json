{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sviluppo\\\\react\\\\exobank\\\\src\\\\components\\\\OperazioniUtente.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Deposito from \"./Deposito\";\nimport Prelievo from \"./Prelievo\";\nimport { ERRORE, INDEX_UTENTE } from \"../utility/Route\";\nimport { findContoUtente, insertTransazione } from \"../service/utenteService\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { listaConti, listaTipoTransazione } from \"../service/adminService\";\nimport { setConto } from \"../store/slice/contoSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function OperazioniUtente({\n  setErrore\n}) {\n  _s();\n  const DEPOSITO = \"1\";\n  const PRELIEVO = \"2\";\n  const BONIFICO = \"3\";\n  const RICARICA = \"4\";\n  const BOLLETTINO = \"5\";\n  const conto = useSelector(state => state.conto);\n  const utente = useSelector(state => state.utente);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [tipoOperazione, setTipoOperazione] = useState();\n  const [conti, setConti] = useState();\n  const [listaOperazioni, setListaOperazioni] = useState();\n  const [visibile, setVisibile] = useState(false);\n  const [visibile2, setVisibile2] = useState(false);\n  const [messaggio, setMessaggio] = useState(\"\");\n  const [aggiornamento, setAggiornamento] = useState(false);\n  const [importo, setImporto] = useState();\n  const [ibanBeneficiario, setIbanBeneficiario] = useState();\n  const [telefono, setTelefono] = useState();\n  useEffect(() => {\n    if (utente.ruolo) {\n      if (utente.ruolo.id == 2) {} else {\n        const errore = {\n          titoloErrore: \"ACCESSO NON AUTORIZZATO\",\n          descrizioneErrore: \"Non hai i permessi per visualizzare la pagina\"\n        };\n        setErrore(errore);\n        history.push(ERRORE);\n      }\n    } else {\n      const errore = {\n        titoloErrore: \"UTENTE NON RICONOSCIUTO\",\n        descrizioneErrore: \"Effettua il login\"\n      };\n      setErrore(errore);\n      history.push(ERRORE);\n    }\n    listaConti().then(response => {\n      if (response.data.success) {\n        setConti(response.data.data.filter(e => e.numeroConto != conto.numeroConto));\n      }\n    }).catch(error => {\n      console.error(\"Qualcosa è andato storto\", error);\n    });\n    listaTipoTransazione().then(response => {\n      if (response.data) {\n        setListaOperazioni(response.data);\n      }\n    }).catch(error => {\n      console.error(\"Qualcosa è andato storto\", error);\n    });\n    if (conto.stato) {\n      if (conto.stato.id == 2 || conto.stato.id == 3) {\n        const errore = {\n          titoloErrore: \"CONTO CHIUSO O DISABILITATO\",\n          descrizioneErrore: \"Siamo spiacenti ma non puoi effetturare operazioni su questo conto\"\n        };\n        setErrore(errore);\n        history.push(ERRORE);\n      }\n    }\n    findContoUtente(utente).then(response => {\n      if (response.data.success) {\n        dispatch(setConto(response.data.data));\n      } else {\n        dispatch(setConto(\"\"));\n      }\n    }).catch(error => {\n      if (error.response.data) {\n        setVisibile(true);\n        setMessaggio(error.response.data);\n      } else {\n        setVisibile(true);\n        setMessaggio(\"Errore sconosciuto\");\n      }\n    });\n  }, [aggiornamento]);\n  function datiConto(conto) {\n    if (!conto) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Non hai un conto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Numero conto:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), \" \", conto.numeroConto]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Stato conto:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), \" \", conto.stato ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: conto.stato.statoContoCorrente\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: -10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Saldo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), \" \\u20AC \", conto.saldo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: conto.saldo.toFixed(2)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n  }\n  function transazione() {\n    switch (tipoOperazione) {\n      case DEPOSITO:\n        {\n          const contoAggiornato = {\n            ...conto\n          };\n          const tipo = {\n            id: 1\n          };\n          const statoTransazione = {\n            id: 1\n          };\n          const transazione = {\n            conto: {\n              ...contoAggiornato\n            },\n            importo: importo,\n            tipo: tipo,\n            statoTransazione: statoTransazione\n          };\n          if (importo < 1000) {\n            insertTransazione(transazione).then(response => {\n              if (response.data) {\n                setVisibile2(true);\n                setAggiornamento(!aggiornamento);\n                setImporto(\"\");\n                const importoNumero = parseFloat(importo);\n                const importoFormattato = importoNumero.toFixed(2);\n                setMessaggio(\"Hai depositato un importo di € \" + importoFormattato + \" sul tuo conto numero \" + conto.numeroConto);\n              }\n            }).catch(error => {\n              if (error.response) {\n                if (error.response.data) {\n                  setVisibile(true);\n                  setMessaggio(error.response.data);\n                }\n              } else {\n                setMessaggio(\"Errore sconosciuto\");\n              }\n            });\n          } else {\n            setMessaggio(\"Non è possibile effettuare depositi sopra € 1000.00\");\n            setAggiornamento(!aggiornamento);\n            setVisibile(true);\n            setImporto(\"\");\n          }\n          break;\n        }\n      case PRELIEVO:\n        {\n          if (importo < 1000) {\n            if (importo > 0) {\n              if (importo < conto.saldo) {\n                const tipo = {\n                  id: 2\n                };\n                const statoTransazione = {\n                  id: 3\n                };\n                const transazione = {\n                  conto: {\n                    ...conto\n                  },\n                  importo: importo,\n                  tipo: tipo,\n                  statoTransazione: statoTransazione\n                };\n                insertTransazione(transazione).then(response => {\n                  if (response.data) {\n                    setVisibile2(true);\n                    setImporto(\"\");\n                    setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\");\n                  }\n                }).catch(error => {\n                  if (error.response.data) {\n                    setVisibile(true);\n                    setMessaggio(error.response.data);\n                  } else {\n                    setMessaggio(\"Errore sconosciuto\");\n                  }\n                });\n              } else {\n                setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\n                setVisibile(true);\n                setImporto(\"\");\n              }\n            } else {\n              setMessaggio(\"Inserisci un importo positivo\");\n              setVisibile(true);\n              setImporto(\"\");\n            }\n          } else {\n            setMessaggio(\"Non è possibile richiedere un prelievo superiore a € 1000.00\");\n            setVisibile(true);\n            setImporto(\"\");\n          }\n          break;\n        }\n      case BONIFICO:\n        {\n          if (importo > 0) {\n            if (importo < 1000) {\n              if (importo < conto.saldo) {\n                if (ibanBeneficiario) {\n                  if (ibanBeneficiario.length == 27) {\n                    const statoTransazione = {\n                      id: 3\n                    };\n                    const tipoTransazione = {\n                      id: 3\n                    };\n                    //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\n                    const contoBeneficiario = conti.find(conti => conti.numeroConto === ibanBeneficiario); //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\n                    // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\n\n                    const transazione = {\n                      conto: {\n                        ...conto\n                      },\n                      importo: importo,\n                      tipo: tipoTransazione,\n                      statoTransazione: statoTransazione,\n                      contoBeneficiario: contoBeneficiario\n                    };\n                    insertTransazione(transazione).then(response => {\n                      if (response.data) {\n                        const impor = parseFloat(importo);\n                        setMessaggio(\"La tua richiesta di bonifico di € \" + impor.toFixed(2) + \" è stata presa in carico\");\n                        setVisibile2(true);\n                        setIbanBeneficiario(\"\");\n                        setImporto(\"\");\n                      }\n                    }).catch(error => {\n                      alert(\"ok catch\");\n                      if (error.response.data) {\n                        setVisibile(true);\n                        setMessaggio(error.response.data);\n                        setIbanBeneficiario(\"\");\n                        setImporto(\"\");\n                      } else {\n                        setMessaggio(\"Errore sconosciuto\");\n                        setIbanBeneficiario(\"\");\n                        setImporto(\"\");\n                      }\n                    }).catch(error => {\n                      console.log(error);\n                    });\n                  } else {\n                    setMessaggio(\"L'iban inserito non è valido\");\n                    setVisibile(true);\n                    setIbanBeneficiario(\"\");\n                    setImporto(\"\");\n                  }\n                } else {\n                  setMessaggio(\"Operazione non consentita, inserisci l'iban\");\n                  setVisibile(true);\n                  setIbanBeneficiario(\"\");\n                  setImporto(\"\");\n                }\n              } else {\n                setMessaggio(\"L'importo inserito è superiore al saldo\");\n                setVisibile(true);\n                setIbanBeneficiario(\"\");\n                setImporto(\"\");\n              }\n            } else {\n              setMessaggio(\"Operazione non consentita, l'importo è superiore ad € 1000.00\");\n              setVisibile(true);\n              setIbanBeneficiario(\"\");\n              setImporto(\"\");\n            }\n          } else {\n            setMessaggio(\"Operazione non consentita, inserisci un importo positivo\");\n            setVisibile(true);\n            setIbanBeneficiario(\"\");\n            setImporto(\"\");\n          }\n          break;\n        }\n      case RICARICA:\n        {\n          if (importo < 1000) {\n            if (importo > 0) {\n              if (importo < conto.saldo) {\n                const tipo = {\n                  id: 4\n                };\n                const statoTransazione = {\n                  id: 3\n                };\n                const transazione = {\n                  conto: {\n                    ...conto\n                  },\n                  importo: importo,\n                  tipo: tipo,\n                  statoTransazione: statoTransazione\n                };\n                insertTransazione(transazione).then(response => {\n                  if (response.data) {\n                    setVisibile2(true);\n                    setImporto(\"\");\n                    setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\");\n                  }\n                }).catch(error => {\n                  if (error.response.data) {\n                    setVisibile(true);\n                    setMessaggio(error.response.data);\n                  } else {\n                    setMessaggio(\"Errore sconosciuto\");\n                  }\n                });\n              } else {\n                setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\n                setVisibile(true);\n                setImporto(\"\");\n              }\n            } else {\n              setMessaggio(\"Inserisci un importo positivo\");\n              setVisibile(true);\n              setImporto(\"\");\n            }\n          } else {\n            setMessaggio(\"Non è possibile richiedere un prelievo superiore a € 1000.00\");\n            setVisibile(true);\n            setImporto(\"\");\n          }\n          break;\n        }\n      case BOLLETTINO:\n        {\n          if (importo > 0) {\n            if (importo < 1000) {\n              if (importo < conto.saldo) {\n                if (ibanBeneficiario) {\n                  if (ibanBeneficiario.length == 27) {\n                    const tipo = {\n                      id: 5\n                    };\n                    const statoTransazione = {\n                      id: 3\n                    };\n                    const transazione = {\n                      conto: {\n                        ...conto\n                      },\n                      importo: importo,\n                      tipo: tipo,\n                      statoTransazione: statoTransazione,\n                      contoBeneficiarioEsterno: ibanBeneficiario\n                    };\n                    insertTransazione(transazione).then(response => {\n                      if (response.data) {\n                        setVisibile2(true);\n                        setImporto(\"\");\n                        setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\");\n                      }\n                    }).catch(error => {\n                      if (error.response.data) {\n                        setVisibile(true);\n                        setMessaggio(error.response.data);\n                      } else {\n                        setMessaggio(\"Errore sconosciuto\");\n                      }\n                    });\n                  } else {\n                    setMessaggio(\"L'iban inserito non è valido\");\n                    setVisibile(true);\n                    setIbanBeneficiario(\"\");\n                    setImporto(\"\");\n                  }\n                } else {\n                  setMessaggio(\"Operazione non consentita, inserisci l'iban\");\n                  setVisibile(true);\n                  setIbanBeneficiario(\"\");\n                  setImporto(\"\");\n                }\n              } else {\n                setMessaggio(\"L'importo inserito è superiore al saldo\");\n                setVisibile(true);\n                setIbanBeneficiario(\"\");\n                setImporto(\"\");\n              }\n            } else {\n              setMessaggio(\"Operazione non consentita, l'importo è superiore ad € 1000.00\");\n              setVisibile(true);\n              setIbanBeneficiario(\"\");\n              setImporto(\"\");\n            }\n          } else {\n            setMessaggio(\"Operazione non consentita, inserisci un importo positivo\");\n            setVisibile(true);\n            setIbanBeneficiario(\"\");\n            setImporto(\"\");\n          }\n          break;\n        }\n    }\n  }\n  function errorBanner(messaggio) {\n    if (visibile) {\n      setTimeout(() => {\n        setImporto(\"\");\n        setVisibile(false);\n        setMessaggio(\"\");\n      }, 5000);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\"\n        },\n        className: \"error-banner\",\n        children: messaggio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }, this);\n    } else if (visibile2) {\n      setTimeout(() => {\n        setImporto(\"\");\n        setVisibile2(false);\n        setMessaggio(\"\");\n      }, 5000);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"green\"\n        },\n        className: \"error-banner\",\n        children: messaggio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 13\n      }, this);\n    } else {\n      return null;\n    }\n  }\n  function operazione(tipoOperazione) {\n    switch (tipoOperazione) {\n      case DEPOSITO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo da depositare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"DEPOSITA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case PRELIEVO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo da prelevare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"PRELEVA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case BONIFICO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"iban\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"DIGITA IBAN BENEFICIARIO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 440\n            },\n            onChange: e => setIbanBeneficiario(e.target.value),\n            value: ibanBeneficiario,\n            type: \"text\",\n            placeholder: \"Inserisci IBAN del beneficiario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Oppure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"iban\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"SELEZIONA IBAN BENEFICIARIO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              width: 440,\n              height: 40,\n              marginTop: 10,\n              margin: 5\n            },\n            onChange: e => setIbanBeneficiario(e.target.value),\n            value: ibanBeneficiario,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \" \\xA0Seleziona un IBAN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 29\n            }, this), conti ? conti.filter(conti => conti.stato.id === 1).map(conti => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: conti.numeroConto,\n              children: [\"\\xA0\", conti.numeroConto, \" \\xA0\\xA0 \", conti.utente.nome, \" \\xA0\\xA0 \", conti.utente.cognome]\n            }, conti.numeroConto, true, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 41\n            }, this)) : null // Aggiungi null se iban non è definito al momento\n            ]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginLeft: 10,\n              marginTop: 0,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo del bonifico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 0,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"FAI UN BONIFICO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case RICARICA:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginTop: 10,\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI IL NUMERO DI TELEFONO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 85\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            type: \"number\",\n            value: telefono,\n            placeholder: \"Inserisci il numero di telefono\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo della ricarica\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"RICARICA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case BOLLETTINO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"iban\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"DIGITA IBAN BENEFICIARIO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 440\n            },\n            onChange: e => setIbanBeneficiario(e.target.value),\n            value: ibanBeneficiario,\n            type: \"text\",\n            placeholder: \"Inserisci IBAN del beneficiario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginLeft: 10,\n              marginTop: 0,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo del bonifico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 0,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"FAI UN BONIFICO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"div-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"DATI CONTO:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: datiConto(conto)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Effettua un operazione\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          style: {\n            marginTop: 10,\n            margin: 5\n          },\n          onChange: e => setTipoOperazione(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Seleziona un operazione\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 25\n          }, this), listaOperazioni ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: listaOperazioni.map(o => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: o.id,\n              children: o.tipoTransazione\n            }, o.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 37\n            }, this))\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 21\n        }, this), operazione(tipoOperazione)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(OperazioniUtente, \"qigeBr6753TlP02dH2jBQqmhfYA=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory];\n});\n_c = OperazioniUtente;\nvar _c;\n$RefreshReg$(_c, \"OperazioniUtente\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","Deposito","Prelievo","ERRORE","INDEX_UTENTE","findContoUtente","insertTransazione","useHistory","listaConti","listaTipoTransazione","setConto","jsxDEV","_jsxDEV","Fragment","_Fragment","OperazioniUtente","setErrore","_s","DEPOSITO","PRELIEVO","BONIFICO","RICARICA","BOLLETTINO","conto","state","utente","dispatch","history","tipoOperazione","setTipoOperazione","conti","setConti","listaOperazioni","setListaOperazioni","visibile","setVisibile","visibile2","setVisibile2","messaggio","setMessaggio","aggiornamento","setAggiornamento","importo","setImporto","ibanBeneficiario","setIbanBeneficiario","telefono","setTelefono","ruolo","id","errore","titoloErrore","descrizioneErrore","push","then","response","data","success","filter","e","numeroConto","catch","error","console","stato","datiConto","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","statoContoCorrente","saldo","toFixed","transazione","contoAggiornato","tipo","statoTransazione","importoNumero","parseFloat","importoFormattato","length","tipoTransazione","contoBeneficiario","find","impor","alert","log","contoBeneficiarioEsterno","errorBanner","setTimeout","color","className","operazione","marginRight","for","marginTop","width","onChange","target","value","type","placeholder","marginLeft","padding","onClick","height","margin","map","nome","cognome","o","_c","$RefreshReg$"],"sources":["C:/Sviluppo/react/exobank/src/components/OperazioniUtente.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Deposito from \"./Deposito\";\r\nimport Prelievo from \"./Prelievo\";\r\nimport { ERRORE, INDEX_UTENTE } from \"../utility/Route\";\r\nimport { findContoUtente, insertTransazione } from \"../service/utenteService\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { listaConti, listaTipoTransazione } from \"../service/adminService\";\r\nimport { setConto } from \"../store/slice/contoSlice\";\r\n\r\n\r\n\r\nexport default function OperazioniUtente({ setErrore }) {\r\n\r\n\r\n    const DEPOSITO = \"1\"\r\n    const PRELIEVO = \"2\"\r\n    const BONIFICO = \"3\" \r\n    const RICARICA = \"4\"\r\n    const BOLLETTINO = \"5\"\r\n    const conto = useSelector(state => state.conto);\r\n    const utente = useSelector(state => state.utente);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [tipoOperazione, setTipoOperazione] = useState();\r\n    const [conti, setConti] = useState();\r\n    const [listaOperazioni,setListaOperazioni] = useState();\r\n    const [visibile,setVisibile] = useState(false)\r\n    const [visibile2,setVisibile2] = useState(false)\r\n    const [messaggio,setMessaggio]= useState(\"\")\r\n    const [aggiornamento,setAggiornamento] = useState(false)\r\n    const [importo,setImporto] = useState();\r\n    const [ibanBeneficiario, setIbanBeneficiario] = useState();\r\n    const [telefono,setTelefono] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (utente.ruolo) {\r\n            if (utente.ruolo.id == 2) {\r\n\r\n            } else {\r\n                const errore = {\r\n                    titoloErrore: \"ACCESSO NON AUTORIZZATO\",\r\n                    descrizioneErrore: \"Non hai i permessi per visualizzare la pagina\"\r\n                }\r\n                setErrore(errore);\r\n                history.push(ERRORE)\r\n            }\r\n        } else {\r\n            const errore = {\r\n                titoloErrore: \"UTENTE NON RICONOSCIUTO\",\r\n                descrizioneErrore: \"Effettua il login\"\r\n            }\r\n            setErrore(errore);\r\n            history.push(ERRORE)\r\n        }\r\n\r\n\r\n\r\n\r\n        listaConti().then((response) => {\r\n            if (response.data.success) {\r\n                setConti(response.data.data.filter((e) =>e.numeroConto != conto.numeroConto))\r\n            }\r\n        }).catch(error => {\r\n            console.error(\"Qualcosa è andato storto\",error)\r\n           })\r\n\r\n        listaTipoTransazione().then((response)=>{\r\n        if(response.data){\r\n            setListaOperazioni(response.data)\r\n        }\r\n        }).catch(error => {\r\n           console.error(\"Qualcosa è andato storto\",error)\r\n          })\r\n\r\n\r\n\r\n\r\n        if (conto.stato) {\r\n            if (conto.stato.id == 2 || conto.stato.id == 3) {\r\n                const errore = {\r\n                    titoloErrore: \"CONTO CHIUSO O DISABILITATO\",\r\n                    descrizioneErrore: \"Siamo spiacenti ma non puoi effetturare operazioni su questo conto\"\r\n\r\n                }\r\n                setErrore(errore);\r\n                history.push(ERRORE)\r\n            }\r\n        }\r\n\r\n        \r\n        findContoUtente(utente).then((response) => {\r\n            if (response.data.success) {\r\n                dispatch(setConto(response.data.data))\r\n            }else{\r\n                dispatch(setConto(\"\"))\r\n            }\r\n        }).catch(error => {\r\n            if (error.response.data) {\r\n              setVisibile(true)\r\n              setMessaggio(error.response.data)\r\n            } else {\r\n              setVisibile(true)\r\n              setMessaggio(\"Errore sconosciuto\");\r\n            }\r\n          })\r\n\r\n\r\n    }, [aggiornamento])\r\n\r\n\r\n    function datiConto(conto) {\r\n        if (!conto) {\r\n            return <p>Non hai un conto</p>;\r\n        } else {\r\n            return (\r\n                <>\r\n                    <p style={{ marginBottom: 0 }}>\r\n                        <b>Numero conto:</b> {conto.numeroConto}\r\n                    </p>\r\n                    <p style={{ marginBottom: 0 }}>\r\n                        <b>Stato conto:</b> {(conto.stato) ? <>{conto.stato.statoContoCorrente}</> : <></>}\r\n                    </p>\r\n                    <p style={{ marginBottom: -10 }}>\r\n                        <b>Saldo:</b> € {(conto.saldo) ? <>{conto.saldo.toFixed(2)}</> : <></>}\r\n                    </p>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function transazione (){\r\n        switch (tipoOperazione){\r\n\r\n            case DEPOSITO:{\r\n                const contoAggiornato = {...conto}\r\n                const tipo={\r\n                    id:1\r\n                }\r\n                const statoTransazione={\r\n                    id:1\r\n                }    \r\n                const transazione = {\r\n                    conto:{...contoAggiornato},\r\n                    importo:importo,\r\n                    tipo:tipo,\r\n                    statoTransazione:statoTransazione,\r\n                }\r\n                if(importo<1000){\r\n                    insertTransazione(transazione).then ((response)=>{\r\n                        if(response.data){\r\n                            setVisibile2(true)\r\n                            setAggiornamento(!aggiornamento)\r\n                            setImporto(\"\")\r\n                            const importoNumero = parseFloat(importo)\r\n                            const importoFormattato = importoNumero.toFixed(2);\r\n                            setMessaggio(\"Hai depositato un importo di € \"+importoFormattato+\" sul tuo conto numero \"+conto.numeroConto)\r\n                        }\r\n                    }).catch(error => {\r\n                        if(error.response){\r\n                            if (error.response.data) {\r\n                                setVisibile(true)\r\n                                setMessaggio(error.response.data)\r\n                            }\r\n                        }\r\n                        else {\r\n                        setMessaggio(\"Errore sconosciuto\");\r\n                        }\r\n                    }) \r\n                }else{\r\n                    setMessaggio(\"Non è possibile effettuare depositi sopra € 1000.00\")\r\n                    setAggiornamento(!aggiornamento)\r\n                    setVisibile(true)\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case PRELIEVO:{\r\n                if(importo<1000){\r\n                    if(importo>0){\r\n                        if(importo<conto.saldo){\r\n                            const tipo={\r\n                                id:2\r\n                            }\r\n                            const statoTransazione={\r\n                                id:3\r\n                            }       \r\n                            const transazione={\r\n                                conto:{...conto},\r\n                                importo:(importo),\r\n                                tipo:tipo,\r\n                                statoTransazione:statoTransazione,\r\n                            }\r\n                            insertTransazione(transazione).then((response)=>{\r\n                                if(response.data){\r\n                                    setVisibile2(true)\r\n                                    setImporto(\"\")\r\n                                    setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\")\r\n                                    }\r\n                                }).catch(error => {\r\n                                    if (error.response.data) {\r\n                                      setVisibile(true)\r\n                                      setMessaggio(error.response.data)\r\n                                    } else {\r\n                                      setMessaggio(\"Errore sconosciuto\");\r\n                                    }\r\n                                  })\r\n                        }else{\r\n                            setMessaggio(\"Operazione non consentita, importo superiore al saldo\")\r\n                            setVisibile(true)\r\n                            setImporto(\"\") \r\n                        }      \r\n                    }else{\r\n                        setMessaggio(\"Inserisci un importo positivo\")\r\n                        setVisibile(true)\r\n                        setImporto(\"\")\r\n                    }        \r\n                }else{\r\n                    setMessaggio(\"Non è possibile richiedere un prelievo superiore a € 1000.00\")\r\n                    setVisibile(true)\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case BONIFICO:{\r\n                if(importo>0){\r\n                    if (importo <1000) {\r\n                        if(importo< conto.saldo){\r\n                            if(ibanBeneficiario){\r\n                                if(ibanBeneficiario.length ==27){\r\n                                    const statoTransazione = {\r\n                                        id: 3\r\n                                    }\r\n                                    const tipoTransazione = {\r\n                                        id: 3\r\n                                    }\r\n                                    //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\r\n                                    const contoBeneficiario = conti.find((conti) => conti.numeroConto === ibanBeneficiario)   //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\r\n                                    // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\r\n                        \r\n                                    const transazione = {\r\n                                        conto: { ...conto },\r\n                                        importo: (importo),\r\n                                        tipo: tipoTransazione,\r\n                                        statoTransazione: statoTransazione,\r\n                                        contoBeneficiario: contoBeneficiario,\r\n                                    }\r\n                                    insertTransazione(transazione).then((response) => {\r\n                                        if (response.data) {\r\n                                            const impor = parseFloat(importo)\r\n                                            setMessaggio(\"La tua richiesta di bonifico di € \"+impor.toFixed(2)+\" è stata presa in carico\");\r\n                                            setVisibile2(true)\r\n                                            setIbanBeneficiario(\"\")\r\n                                            setImporto(\"\")\r\n                                        }\r\n                                    }).catch(error => {\r\n                                        alert(\"ok catch\")\r\n                                        if (error.response.data) {\r\n                                          setVisibile(true)\r\n                                          setMessaggio(error.response.data)\r\n                                          setIbanBeneficiario(\"\")\r\n                                          setImporto(\"\")\r\n                                        } else {\r\n                                          setMessaggio(\"Errore sconosciuto\");\r\n                                          setIbanBeneficiario(\"\")\r\n                                          setImporto(\"\")\r\n                                        }\r\n                                      }).catch(error => {\r\n                                        console.log(error)\r\n                                    })\r\n                                }else{\r\n                                setMessaggio(\"L'iban inserito non è valido\");\r\n                                setVisibile(true)\r\n                                setIbanBeneficiario(\"\")\r\n                                setImporto(\"\")\r\n                                }\r\n                            }else{\r\n                            setMessaggio(\"Operazione non consentita, inserisci l'iban\");\r\n                            setVisibile(true)\r\n                            setIbanBeneficiario(\"\")\r\n                            setImporto(\"\")\r\n                            }\r\n                            \r\n                        }else{\r\n                        setMessaggio(\"L'importo inserito è superiore al saldo\");\r\n                        setVisibile(true)\r\n                        setIbanBeneficiario(\"\")\r\n                        setImporto(\"\")\r\n                    } \r\n                    }else{     \r\n                        setMessaggio(\"Operazione non consentita, l'importo è superiore ad € 1000.00\");\r\n                        setVisibile(true)\r\n                        setIbanBeneficiario(\"\")\r\n                        setImporto(\"\")\r\n                    } \r\n                }else{\r\n                    setMessaggio(\"Operazione non consentita, inserisci un importo positivo\");\r\n                    setVisibile(true)\r\n                    setIbanBeneficiario(\"\")\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case RICARICA:{\r\n                if(importo<1000){\r\n                    if(importo>0){\r\n                        if(importo<conto.saldo){\r\n                            const tipo={\r\n                                id:4\r\n                            }\r\n                            const statoTransazione={\r\n                                id:3\r\n                            }       \r\n                            const transazione={\r\n                                conto:{...conto},\r\n                                importo:(importo),\r\n                                tipo:tipo,\r\n                                statoTransazione:statoTransazione,\r\n                            }\r\n                            insertTransazione(transazione).then((response)=>{\r\n                                if(response.data){\r\n                                    setVisibile2(true)\r\n                                    setImporto(\"\")\r\n                                    setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\")\r\n                                    }\r\n                                }).catch(error => {\r\n                                    if (error.response.data) {\r\n                                      setVisibile(true)\r\n                                      setMessaggio(error.response.data)\r\n                                    } else {\r\n                                      setMessaggio(\"Errore sconosciuto\");\r\n                                    }\r\n                                  })\r\n                        }else{\r\n                            setMessaggio(\"Operazione non consentita, importo superiore al saldo\")\r\n                            setVisibile(true)\r\n                            setImporto(\"\") \r\n                        }      \r\n                    }else{\r\n                        setMessaggio(\"Inserisci un importo positivo\")\r\n                        setVisibile(true)\r\n                        setImporto(\"\")\r\n                    }        \r\n                }else{\r\n                    setMessaggio(\"Non è possibile richiedere un prelievo superiore a € 1000.00\")\r\n                    setVisibile(true)\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case BOLLETTINO:{\r\n                if(importo>0){\r\n                    if (importo <1000) {\r\n                        if(importo< conto.saldo){\r\n                            if(ibanBeneficiario){\r\n                                if(ibanBeneficiario.length ==27){\r\n                                    const tipo={\r\n                                        id:5\r\n                                    }\r\n                                    const statoTransazione={\r\n                                        id:3\r\n                                    }       \r\n                                    const transazione={\r\n                                        conto:{...conto},\r\n                                        importo:(importo),\r\n                                        tipo:tipo,\r\n                                        statoTransazione:statoTransazione,\r\n                                        contoBeneficiarioEsterno: ibanBeneficiario\r\n                                    }\r\n                                    insertTransazione(transazione).then((response)=>{\r\n                                        if(response.data){\r\n                                            setVisibile2(true)\r\n                                            setImporto(\"\")\r\n                                            setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\")\r\n                                            }\r\n                                        }).catch(error => {\r\n                                            if (error.response.data) {\r\n                                              setVisibile(true)\r\n                                              setMessaggio(error.response.data)\r\n                                            } else {\r\n                                              setMessaggio(\"Errore sconosciuto\");\r\n                                            }\r\n                                          })\r\n                                }else{\r\n                                setMessaggio(\"L'iban inserito non è valido\");\r\n                                setVisibile(true)\r\n                                setIbanBeneficiario(\"\")\r\n                                setImporto(\"\")\r\n                                }\r\n                            }else{\r\n                            setMessaggio(\"Operazione non consentita, inserisci l'iban\");\r\n                            setVisibile(true)\r\n                            setIbanBeneficiario(\"\")\r\n                            setImporto(\"\")\r\n                            }\r\n                            \r\n                        }else{\r\n                        setMessaggio(\"L'importo inserito è superiore al saldo\");\r\n                        setVisibile(true)\r\n                        setIbanBeneficiario(\"\")\r\n                        setImporto(\"\")\r\n                    } \r\n                    }else{     \r\n                        setMessaggio(\"Operazione non consentita, l'importo è superiore ad € 1000.00\");\r\n                        setVisibile(true)\r\n                        setIbanBeneficiario(\"\")\r\n                        setImporto(\"\")\r\n                    } \r\n                }else{\r\n                    setMessaggio(\"Operazione non consentita, inserisci un importo positivo\");\r\n                    setVisibile(true)\r\n                    setIbanBeneficiario(\"\")\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n           \r\n\r\n        }\r\n    }\r\n\r\n    function errorBanner(messaggio) {\r\n        if (visibile) {\r\n          setTimeout(() => {\r\n            setImporto(\"\")\r\n            setVisibile(false);\r\n            setMessaggio(\"\");\r\n          }, 5000);\r\n          return (\r\n            <div style={{ color: \"red\" }} className=\"error-banner\">\r\n              {messaggio}\r\n            </div>\r\n          );\r\n        } else if (visibile2) {\r\n          setTimeout(() => {\r\n            setImporto(\"\")\r\n            setVisibile2(false);\r\n            setMessaggio(\"\");\r\n          }, 5000);\r\n          return (\r\n            <div style={{ color: \"green\" }} className=\"error-banner\">\r\n              {messaggio}\r\n            </div>\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n\r\n    function operazione(tipoOperazione) {\r\n\r\n\r\n        switch (tipoOperazione) {\r\n            case DEPOSITO:\r\n                return (\r\n                    <>\r\n                    <br />\r\n                        <label style={{marginRight:10}} for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo da depositare\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">DEPOSITA</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n            case PRELIEVO:\r\n                return (\r\n                    <>\r\n                        <br />\r\n                        <label style={{marginRight:10}} for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo da prelevare\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">PRELEVA</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n            case BONIFICO:\r\n                return (\r\n                    <>\r\n                    <br />\r\n                    <br />\r\n                         <label for=\"iban\"><b>DIGITA IBAN BENEFICIARIO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 440 }} onChange={(e) => setIbanBeneficiario(e.target.value)} value={ibanBeneficiario} type=\"text\" placeholder=\"Inserisci IBAN del beneficiario\"></input>\r\n                        <br />\r\n                        <p><b>Oppure</b></p>\r\n                        <label for=\"iban\"><b>SELEZIONA IBAN BENEFICIARIO: </b></label>\r\n                        <select\r\n                            style={{ width: 440, height: 40, marginTop: 10, margin: 5 }}\r\n                            onChange={(e) => setIbanBeneficiario(e.target.value)} value={ibanBeneficiario}\r\n                        >\r\n                            <option value=\"\"> &nbsp;Seleziona un IBAN</option>\r\n                            {conti\r\n                                ? conti\r\n                                    .filter((conti) => conti.stato.id === 1)\r\n                                    .map((conti) => (\r\n                                        <option key={conti.numeroConto} value={conti.numeroConto}>\r\n                                            &nbsp;{conti.numeroConto} &nbsp;&nbsp; {conti.utente.nome} &nbsp;&nbsp; {conti.utente.cognome}\r\n                                        </option>\r\n                                    ))\r\n                                : null // Aggiungi null se iban non è definito al momento\r\n                            }\r\n                        </select>\r\n                        <br />\r\n                        <br />\r\n\r\n                        <label for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{marginLeft:10, marginTop: 0, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo del bonifico\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 0, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">FAI UN BONIFICO</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n                case RICARICA:\r\n                return (\r\n                    <>\r\n                        <br />\r\n                        \r\n                        <label style={{marginTop: 10,marginRight:10}} for=\"importo\"><b>INSERISCI IL NUMERO DI TELEFONO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 255 }} type=\"number\" value={telefono} placeholder=\"Inserisci il numero di telefono\"></input>\r\n                        <br />\r\n                        <br />\r\n                        <label style={{marginRight:10}} for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <br />\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo della ricarica\"></input>\r\n                        <br />\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">RICARICA</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n                case BOLLETTINO:\r\n                return (\r\n                    <>\r\n                    <br />\r\n                    <br />\r\n                         <label for=\"iban\"><b>DIGITA IBAN BENEFICIARIO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 440 }} onChange={(e) => setIbanBeneficiario(e.target.value)} value={ibanBeneficiario} type=\"text\" placeholder=\"Inserisci IBAN del beneficiario\"></input>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <label for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{marginLeft:10, marginTop: 0, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo del bonifico\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 0, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">FAI UN BONIFICO</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <div className=\"div\">\r\n\r\n                <div className=\"div-container\">\r\n                    <h3><b>DATI CONTO:</b></h3>\r\n                    <br />\r\n                    <p><b>{datiConto(conto)}</b></p>\r\n                    <p><b>Effettua un operazione</b></p>\r\n                    <select\r\n                        style={{ marginTop: 10, margin: 5 }}\r\n                        onChange={(e) => setTipoOperazione(e.target.value)}\r\n                    >\r\n                        <option value=\"\" >Seleziona un operazione</option>\r\n                        {listaOperazioni ? (\r\n                            <>\r\n                                {listaOperazioni.map((o) => (\r\n                                    <option key={o.id} value={o.id}>\r\n                                        {o.tipoTransazione}\r\n                                    </option>\r\n                                ))}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                            </>\r\n                        )}\r\n                    </select>\r\n\r\n                    {operazione(tipoOperazione)}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,MAAM,EAAEC,YAAY,QAAQ,kBAAkB;AACvD,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC7E,SAASC,UAAU,QAAQ,2CAA2C;AACtE,SAASC,UAAU,EAAEC,oBAAoB,QAAQ,yBAAyB;AAC1E,SAASC,QAAQ,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAIrD,eAAe,SAASC,gBAAgBA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAGpD,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,UAAU,GAAG,GAAG;EACtB,MAAMC,KAAK,GAAGvB,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACD,KAAK,CAAC;EAC/C,MAAME,MAAM,GAAGzB,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,MAAM,CAAC;EACjD,MAAMC,QAAQ,GAAG3B,WAAW,CAAC,CAAC;EAC9B,MAAM4B,OAAO,GAAGpB,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAG/B,QAAQ,CAAC,CAAC;EACtD,MAAM,CAACgC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,CAAC;EACpC,MAAM,CAACkC,eAAe,EAACC,kBAAkB,CAAC,GAAGnC,QAAQ,CAAC,CAAC;EACvD,MAAM,CAACoC,QAAQ,EAACC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC9C,MAAM,CAACsC,SAAS,EAACC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAChD,MAAM,CAACwC,SAAS,EAACC,YAAY,CAAC,GAAEzC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0C,aAAa,EAACC,gBAAgB,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EACxD,MAAM,CAAC4C,OAAO,EAACC,UAAU,CAAC,GAAG7C,QAAQ,CAAC,CAAC;EACvC,MAAM,CAAC8C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/C,QAAQ,CAAC,CAAC;EAC1D,MAAM,CAACgD,QAAQ,EAACC,WAAW,CAAC,GAAGjD,QAAQ,CAAC,CAAC;EAGzCD,SAAS,CAAC,MAAM;IAEZ,IAAI4B,MAAM,CAACuB,KAAK,EAAE;MACd,IAAIvB,MAAM,CAACuB,KAAK,CAACC,EAAE,IAAI,CAAC,EAAE,CAE1B,CAAC,MAAM;QACH,MAAMC,MAAM,GAAG;UACXC,YAAY,EAAE,yBAAyB;UACvCC,iBAAiB,EAAE;QACvB,CAAC;QACDpC,SAAS,CAACkC,MAAM,CAAC;QACjBvB,OAAO,CAAC0B,IAAI,CAAClD,MAAM,CAAC;MACxB;IACJ,CAAC,MAAM;MACH,MAAM+C,MAAM,GAAG;QACXC,YAAY,EAAE,yBAAyB;QACvCC,iBAAiB,EAAE;MACvB,CAAC;MACDpC,SAAS,CAACkC,MAAM,CAAC;MACjBvB,OAAO,CAAC0B,IAAI,CAAClD,MAAM,CAAC;IACxB;IAKAK,UAAU,CAAC,CAAC,CAAC8C,IAAI,CAAEC,QAAQ,IAAK;MAC5B,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;QACvB1B,QAAQ,CAACwB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAACE,MAAM,CAAEC,CAAC,IAAIA,CAAC,CAACC,WAAW,IAAIrC,KAAK,CAACqC,WAAW,CAAC,CAAC;MACjF;IACJ,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAACA,KAAK,CAAC;IAChD,CAAC,CAAC;IAELrD,oBAAoB,CAAC,CAAC,CAAC6C,IAAI,CAAEC,QAAQ,IAAG;MACxC,IAAGA,QAAQ,CAACC,IAAI,EAAC;QACbvB,kBAAkB,CAACsB,QAAQ,CAACC,IAAI,CAAC;MACrC;IACA,CAAC,CAAC,CAACK,KAAK,CAACC,KAAK,IAAI;MACfC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAACA,KAAK,CAAC;IAChD,CAAC,CAAC;IAKJ,IAAIvC,KAAK,CAACyC,KAAK,EAAE;MACb,IAAIzC,KAAK,CAACyC,KAAK,CAACf,EAAE,IAAI,CAAC,IAAI1B,KAAK,CAACyC,KAAK,CAACf,EAAE,IAAI,CAAC,EAAE;QAC5C,MAAMC,MAAM,GAAG;UACXC,YAAY,EAAE,6BAA6B;UAC3CC,iBAAiB,EAAE;QAEvB,CAAC;QACDpC,SAAS,CAACkC,MAAM,CAAC;QACjBvB,OAAO,CAAC0B,IAAI,CAAClD,MAAM,CAAC;MACxB;IACJ;IAGAE,eAAe,CAACoB,MAAM,CAAC,CAAC6B,IAAI,CAAEC,QAAQ,IAAK;MACvC,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;QACvB/B,QAAQ,CAAChB,QAAQ,CAAC6C,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC;MAC1C,CAAC,MAAI;QACD9B,QAAQ,CAAChB,QAAQ,CAAC,EAAE,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC,CAACmD,KAAK,CAACC,KAAK,IAAI;MACd,IAAIA,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;QACvBrB,WAAW,CAAC,IAAI,CAAC;QACjBI,YAAY,CAACuB,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;MACnC,CAAC,MAAM;QACLrB,WAAW,CAAC,IAAI,CAAC;QACjBI,YAAY,CAAC,oBAAoB,CAAC;MACpC;IACF,CAAC,CAAC;EAGR,CAAC,EAAE,CAACC,aAAa,CAAC,CAAC;EAGnB,SAASyB,SAASA,CAAC1C,KAAK,EAAE;IACtB,IAAI,CAACA,KAAK,EAAE;MACR,oBAAOX,OAAA;QAAAsD,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAClC,CAAC,MAAM;MACH,oBACI1D,OAAA,CAAAE,SAAA;QAAAoD,QAAA,gBACItD,OAAA;UAAG2D,KAAK,EAAE;YAAEC,YAAY,EAAE;UAAE,CAAE;UAAAN,QAAA,gBAC1BtD,OAAA;YAAAsD,QAAA,EAAG;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,KAAC,EAAC/C,KAAK,CAACqC,WAAW;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,eACJ1D,OAAA;UAAG2D,KAAK,EAAE;YAAEC,YAAY,EAAE;UAAE,CAAE;UAAAN,QAAA,gBAC1BtD,OAAA;YAAAsD,QAAA,EAAG;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,KAAC,EAAE/C,KAAK,CAACyC,KAAK,gBAAIpD,OAAA,CAAAE,SAAA;YAAAoD,QAAA,EAAG3C,KAAK,CAACyC,KAAK,CAACS;UAAkB,gBAAG,CAAC,gBAAG7D,OAAA,CAAAE,SAAA,mBAAI,CAAC;QAAA;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnF,CAAC,eACJ1D,OAAA;UAAG2D,KAAK,EAAE;YAAEC,YAAY,EAAE,CAAC;UAAG,CAAE;UAAAN,QAAA,gBAC5BtD,OAAA;YAAAsD,QAAA,EAAG;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,YAAG,EAAE/C,KAAK,CAACmD,KAAK,gBAAI9D,OAAA,CAAAE,SAAA;YAAAoD,QAAA,EAAG3C,KAAK,CAACmD,KAAK,CAACC,OAAO,CAAC,CAAC;UAAC,gBAAG,CAAC,gBAAG/D,OAAA,CAAAE,SAAA,mBAAI,CAAC;QAAA;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC;MAAA,eACN,CAAC;IAEX;EAGJ;EAGA,SAASM,WAAWA,CAAA,EAAG;IACnB,QAAQhD,cAAc;MAElB,KAAKV,QAAQ;QAAC;UACV,MAAM2D,eAAe,GAAG;YAAC,GAAGtD;UAAK,CAAC;UAClC,MAAMuD,IAAI,GAAC;YACP7B,EAAE,EAAC;UACP,CAAC;UACD,MAAM8B,gBAAgB,GAAC;YACnB9B,EAAE,EAAC;UACP,CAAC;UACD,MAAM2B,WAAW,GAAG;YAChBrD,KAAK,EAAC;cAAC,GAAGsD;YAAe,CAAC;YAC1BnC,OAAO,EAACA,OAAO;YACfoC,IAAI,EAACA,IAAI;YACTC,gBAAgB,EAACA;UACrB,CAAC;UACD,IAAGrC,OAAO,GAAC,IAAI,EAAC;YACZpC,iBAAiB,CAACsE,WAAW,CAAC,CAACtB,IAAI,CAAGC,QAAQ,IAAG;cAC7C,IAAGA,QAAQ,CAACC,IAAI,EAAC;gBACbnB,YAAY,CAAC,IAAI,CAAC;gBAClBI,gBAAgB,CAAC,CAACD,aAAa,CAAC;gBAChCG,UAAU,CAAC,EAAE,CAAC;gBACd,MAAMqC,aAAa,GAAGC,UAAU,CAACvC,OAAO,CAAC;gBACzC,MAAMwC,iBAAiB,GAAGF,aAAa,CAACL,OAAO,CAAC,CAAC,CAAC;gBAClDpC,YAAY,CAAC,iCAAiC,GAAC2C,iBAAiB,GAAC,wBAAwB,GAAC3D,KAAK,CAACqC,WAAW,CAAC;cAChH;YACJ,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;cACd,IAAGA,KAAK,CAACP,QAAQ,EAAC;gBACd,IAAIO,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;kBACrBrB,WAAW,CAAC,IAAI,CAAC;kBACjBI,YAAY,CAACuB,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;gBACrC;cACJ,CAAC,MACI;gBACLjB,YAAY,CAAC,oBAAoB,CAAC;cAClC;YACJ,CAAC,CAAC;UACN,CAAC,MAAI;YACDA,YAAY,CAAC,qDAAqD,CAAC;YACnEE,gBAAgB,CAAC,CAACD,aAAa,CAAC;YAChCL,WAAW,CAAC,IAAI,CAAC;YACjBQ,UAAU,CAAC,EAAE,CAAC;UAClB;UACA;QACJ;MACA,KAAKxB,QAAQ;QAAC;UACV,IAAGuB,OAAO,GAAC,IAAI,EAAC;YACZ,IAAGA,OAAO,GAAC,CAAC,EAAC;cACT,IAAGA,OAAO,GAACnB,KAAK,CAACmD,KAAK,EAAC;gBACnB,MAAMI,IAAI,GAAC;kBACP7B,EAAE,EAAC;gBACP,CAAC;gBACD,MAAM8B,gBAAgB,GAAC;kBACnB9B,EAAE,EAAC;gBACP,CAAC;gBACD,MAAM2B,WAAW,GAAC;kBACdrD,KAAK,EAAC;oBAAC,GAAGA;kBAAK,CAAC;kBAChBmB,OAAO,EAAEA,OAAQ;kBACjBoC,IAAI,EAACA,IAAI;kBACTC,gBAAgB,EAACA;gBACrB,CAAC;gBACDzE,iBAAiB,CAACsE,WAAW,CAAC,CAACtB,IAAI,CAAEC,QAAQ,IAAG;kBAC5C,IAAGA,QAAQ,CAACC,IAAI,EAAC;oBACbnB,YAAY,CAAC,IAAI,CAAC;oBAClBM,UAAU,CAAC,EAAE,CAAC;oBACdJ,YAAY,CAAC,sDAAsD,CAAC;kBACpE;gBACJ,CAAC,CAAC,CAACsB,KAAK,CAACC,KAAK,IAAI;kBACd,IAAIA,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;oBACvBrB,WAAW,CAAC,IAAI,CAAC;oBACjBI,YAAY,CAACuB,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;kBACnC,CAAC,MAAM;oBACLjB,YAAY,CAAC,oBAAoB,CAAC;kBACpC;gBACF,CAAC,CAAC;cACZ,CAAC,MAAI;gBACDA,YAAY,CAAC,uDAAuD,CAAC;gBACrEJ,WAAW,CAAC,IAAI,CAAC;gBACjBQ,UAAU,CAAC,EAAE,CAAC;cAClB;YACJ,CAAC,MAAI;cACDJ,YAAY,CAAC,+BAA+B,CAAC;cAC7CJ,WAAW,CAAC,IAAI,CAAC;cACjBQ,UAAU,CAAC,EAAE,CAAC;YAClB;UACJ,CAAC,MAAI;YACDJ,YAAY,CAAC,8DAA8D,CAAC;YAC5EJ,WAAW,CAAC,IAAI,CAAC;YACjBQ,UAAU,CAAC,EAAE,CAAC;UAClB;UACA;QACJ;MACA,KAAKvB,QAAQ;QAAC;UACV,IAAGsB,OAAO,GAAC,CAAC,EAAC;YACT,IAAIA,OAAO,GAAE,IAAI,EAAE;cACf,IAAGA,OAAO,GAAEnB,KAAK,CAACmD,KAAK,EAAC;gBACpB,IAAG9B,gBAAgB,EAAC;kBAChB,IAAGA,gBAAgB,CAACuC,MAAM,IAAG,EAAE,EAAC;oBAC5B,MAAMJ,gBAAgB,GAAG;sBACrB9B,EAAE,EAAE;oBACR,CAAC;oBACD,MAAMmC,eAAe,GAAG;sBACpBnC,EAAE,EAAE;oBACR,CAAC;oBACD;oBACA,MAAMoC,iBAAiB,GAAGvD,KAAK,CAACwD,IAAI,CAAExD,KAAK,IAAKA,KAAK,CAAC8B,WAAW,KAAKhB,gBAAgB,CAAC,EAAG;oBAC1F;;oBAEA,MAAMgC,WAAW,GAAG;sBAChBrD,KAAK,EAAE;wBAAE,GAAGA;sBAAM,CAAC;sBACnBmB,OAAO,EAAGA,OAAQ;sBAClBoC,IAAI,EAAEM,eAAe;sBACrBL,gBAAgB,EAAEA,gBAAgB;sBAClCM,iBAAiB,EAAEA;oBACvB,CAAC;oBACD/E,iBAAiB,CAACsE,WAAW,CAAC,CAACtB,IAAI,CAAEC,QAAQ,IAAK;sBAC9C,IAAIA,QAAQ,CAACC,IAAI,EAAE;wBACf,MAAM+B,KAAK,GAAGN,UAAU,CAACvC,OAAO,CAAC;wBACjCH,YAAY,CAAC,oCAAoC,GAACgD,KAAK,CAACZ,OAAO,CAAC,CAAC,CAAC,GAAC,0BAA0B,CAAC;wBAC9FtC,YAAY,CAAC,IAAI,CAAC;wBAClBQ,mBAAmB,CAAC,EAAE,CAAC;wBACvBF,UAAU,CAAC,EAAE,CAAC;sBAClB;oBACJ,CAAC,CAAC,CAACkB,KAAK,CAACC,KAAK,IAAI;sBACd0B,KAAK,CAAC,UAAU,CAAC;sBACjB,IAAI1B,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;wBACvBrB,WAAW,CAAC,IAAI,CAAC;wBACjBI,YAAY,CAACuB,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;wBACjCX,mBAAmB,CAAC,EAAE,CAAC;wBACvBF,UAAU,CAAC,EAAE,CAAC;sBAChB,CAAC,MAAM;wBACLJ,YAAY,CAAC,oBAAoB,CAAC;wBAClCM,mBAAmB,CAAC,EAAE,CAAC;wBACvBF,UAAU,CAAC,EAAE,CAAC;sBAChB;oBACF,CAAC,CAAC,CAACkB,KAAK,CAACC,KAAK,IAAI;sBAChBC,OAAO,CAAC0B,GAAG,CAAC3B,KAAK,CAAC;oBACtB,CAAC,CAAC;kBACN,CAAC,MAAI;oBACLvB,YAAY,CAAC,8BAA8B,CAAC;oBAC5CJ,WAAW,CAAC,IAAI,CAAC;oBACjBU,mBAAmB,CAAC,EAAE,CAAC;oBACvBF,UAAU,CAAC,EAAE,CAAC;kBACd;gBACJ,CAAC,MAAI;kBACLJ,YAAY,CAAC,6CAA6C,CAAC;kBAC3DJ,WAAW,CAAC,IAAI,CAAC;kBACjBU,mBAAmB,CAAC,EAAE,CAAC;kBACvBF,UAAU,CAAC,EAAE,CAAC;gBACd;cAEJ,CAAC,MAAI;gBACLJ,YAAY,CAAC,yCAAyC,CAAC;gBACvDJ,WAAW,CAAC,IAAI,CAAC;gBACjBU,mBAAmB,CAAC,EAAE,CAAC;gBACvBF,UAAU,CAAC,EAAE,CAAC;cAClB;YACA,CAAC,MAAI;cACDJ,YAAY,CAAC,+DAA+D,CAAC;cAC7EJ,WAAW,CAAC,IAAI,CAAC;cACjBU,mBAAmB,CAAC,EAAE,CAAC;cACvBF,UAAU,CAAC,EAAE,CAAC;YAClB;UACJ,CAAC,MAAI;YACDJ,YAAY,CAAC,0DAA0D,CAAC;YACxEJ,WAAW,CAAC,IAAI,CAAC;YACjBU,mBAAmB,CAAC,EAAE,CAAC;YACvBF,UAAU,CAAC,EAAE,CAAC;UAClB;UACA;QACJ;MACA,KAAKtB,QAAQ;QAAC;UACV,IAAGqB,OAAO,GAAC,IAAI,EAAC;YACZ,IAAGA,OAAO,GAAC,CAAC,EAAC;cACT,IAAGA,OAAO,GAACnB,KAAK,CAACmD,KAAK,EAAC;gBACnB,MAAMI,IAAI,GAAC;kBACP7B,EAAE,EAAC;gBACP,CAAC;gBACD,MAAM8B,gBAAgB,GAAC;kBACnB9B,EAAE,EAAC;gBACP,CAAC;gBACD,MAAM2B,WAAW,GAAC;kBACdrD,KAAK,EAAC;oBAAC,GAAGA;kBAAK,CAAC;kBAChBmB,OAAO,EAAEA,OAAQ;kBACjBoC,IAAI,EAACA,IAAI;kBACTC,gBAAgB,EAACA;gBACrB,CAAC;gBACDzE,iBAAiB,CAACsE,WAAW,CAAC,CAACtB,IAAI,CAAEC,QAAQ,IAAG;kBAC5C,IAAGA,QAAQ,CAACC,IAAI,EAAC;oBACbnB,YAAY,CAAC,IAAI,CAAC;oBAClBM,UAAU,CAAC,EAAE,CAAC;oBACdJ,YAAY,CAAC,sDAAsD,CAAC;kBACpE;gBACJ,CAAC,CAAC,CAACsB,KAAK,CAACC,KAAK,IAAI;kBACd,IAAIA,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;oBACvBrB,WAAW,CAAC,IAAI,CAAC;oBACjBI,YAAY,CAACuB,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;kBACnC,CAAC,MAAM;oBACLjB,YAAY,CAAC,oBAAoB,CAAC;kBACpC;gBACF,CAAC,CAAC;cACZ,CAAC,MAAI;gBACDA,YAAY,CAAC,uDAAuD,CAAC;gBACrEJ,WAAW,CAAC,IAAI,CAAC;gBACjBQ,UAAU,CAAC,EAAE,CAAC;cAClB;YACJ,CAAC,MAAI;cACDJ,YAAY,CAAC,+BAA+B,CAAC;cAC7CJ,WAAW,CAAC,IAAI,CAAC;cACjBQ,UAAU,CAAC,EAAE,CAAC;YAClB;UACJ,CAAC,MAAI;YACDJ,YAAY,CAAC,8DAA8D,CAAC;YAC5EJ,WAAW,CAAC,IAAI,CAAC;YACjBQ,UAAU,CAAC,EAAE,CAAC;UAClB;UACA;QACJ;MACA,KAAKrB,UAAU;QAAC;UACZ,IAAGoB,OAAO,GAAC,CAAC,EAAC;YACT,IAAIA,OAAO,GAAE,IAAI,EAAE;cACf,IAAGA,OAAO,GAAEnB,KAAK,CAACmD,KAAK,EAAC;gBACpB,IAAG9B,gBAAgB,EAAC;kBAChB,IAAGA,gBAAgB,CAACuC,MAAM,IAAG,EAAE,EAAC;oBAC5B,MAAML,IAAI,GAAC;sBACP7B,EAAE,EAAC;oBACP,CAAC;oBACD,MAAM8B,gBAAgB,GAAC;sBACnB9B,EAAE,EAAC;oBACP,CAAC;oBACD,MAAM2B,WAAW,GAAC;sBACdrD,KAAK,EAAC;wBAAC,GAAGA;sBAAK,CAAC;sBAChBmB,OAAO,EAAEA,OAAQ;sBACjBoC,IAAI,EAACA,IAAI;sBACTC,gBAAgB,EAACA,gBAAgB;sBACjCW,wBAAwB,EAAE9C;oBAC9B,CAAC;oBACDtC,iBAAiB,CAACsE,WAAW,CAAC,CAACtB,IAAI,CAAEC,QAAQ,IAAG;sBAC5C,IAAGA,QAAQ,CAACC,IAAI,EAAC;wBACbnB,YAAY,CAAC,IAAI,CAAC;wBAClBM,UAAU,CAAC,EAAE,CAAC;wBACdJ,YAAY,CAAC,sDAAsD,CAAC;sBACpE;oBACJ,CAAC,CAAC,CAACsB,KAAK,CAACC,KAAK,IAAI;sBACd,IAAIA,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;wBACvBrB,WAAW,CAAC,IAAI,CAAC;wBACjBI,YAAY,CAACuB,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;sBACnC,CAAC,MAAM;wBACLjB,YAAY,CAAC,oBAAoB,CAAC;sBACpC;oBACF,CAAC,CAAC;kBACZ,CAAC,MAAI;oBACLA,YAAY,CAAC,8BAA8B,CAAC;oBAC5CJ,WAAW,CAAC,IAAI,CAAC;oBACjBU,mBAAmB,CAAC,EAAE,CAAC;oBACvBF,UAAU,CAAC,EAAE,CAAC;kBACd;gBACJ,CAAC,MAAI;kBACLJ,YAAY,CAAC,6CAA6C,CAAC;kBAC3DJ,WAAW,CAAC,IAAI,CAAC;kBACjBU,mBAAmB,CAAC,EAAE,CAAC;kBACvBF,UAAU,CAAC,EAAE,CAAC;gBACd;cAEJ,CAAC,MAAI;gBACLJ,YAAY,CAAC,yCAAyC,CAAC;gBACvDJ,WAAW,CAAC,IAAI,CAAC;gBACjBU,mBAAmB,CAAC,EAAE,CAAC;gBACvBF,UAAU,CAAC,EAAE,CAAC;cAClB;YACA,CAAC,MAAI;cACDJ,YAAY,CAAC,+DAA+D,CAAC;cAC7EJ,WAAW,CAAC,IAAI,CAAC;cACjBU,mBAAmB,CAAC,EAAE,CAAC;cACvBF,UAAU,CAAC,EAAE,CAAC;YAClB;UACJ,CAAC,MAAI;YACDJ,YAAY,CAAC,0DAA0D,CAAC;YACxEJ,WAAW,CAAC,IAAI,CAAC;YACjBU,mBAAmB,CAAC,EAAE,CAAC;YACvBF,UAAU,CAAC,EAAE,CAAC;UAClB;UACA;QACJ;IAGJ;EACJ;EAEA,SAASgD,WAAWA,CAACrD,SAAS,EAAE;IAC5B,IAAIJ,QAAQ,EAAE;MACZ0D,UAAU,CAAC,MAAM;QACfjD,UAAU,CAAC,EAAE,CAAC;QACdR,WAAW,CAAC,KAAK,CAAC;QAClBI,YAAY,CAAC,EAAE,CAAC;MAClB,CAAC,EAAE,IAAI,CAAC;MACR,oBACE3B,OAAA;QAAK2D,KAAK,EAAE;UAAEsB,KAAK,EAAE;QAAM,CAAE;QAACC,SAAS,EAAC,cAAc;QAAA5B,QAAA,EACnD5B;MAAS;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAEV,CAAC,MAAM,IAAIlC,SAAS,EAAE;MACpBwD,UAAU,CAAC,MAAM;QACfjD,UAAU,CAAC,EAAE,CAAC;QACdN,YAAY,CAAC,KAAK,CAAC;QACnBE,YAAY,CAAC,EAAE,CAAC;MAClB,CAAC,EAAE,IAAI,CAAC;MACR,oBACE3B,OAAA;QAAK2D,KAAK,EAAE;UAAEsB,KAAK,EAAE;QAAQ,CAAE;QAACC,SAAS,EAAC,cAAc;QAAA5B,QAAA,EACrD5B;MAAS;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAEV,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EAGF,SAASyB,UAAUA,CAACnE,cAAc,EAAE;IAGhC,QAAQA,cAAc;MAClB,KAAKV,QAAQ;QACT,oBACIN,OAAA,CAAAE,SAAA;UAAAoD,QAAA,gBACAtD,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACF1D,OAAA;YAAO2D,KAAK,EAAE;cAACyB,WAAW,EAAC;YAAE,CAAE;YAACC,GAAG,EAAC,SAAS;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClF1D,OAAA;YAAO2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKhB,UAAU,CAACgB,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE5D,OAAQ;YAAC6D,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAmC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChL1D,OAAA;YAAQ2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAM/B,WAAW,CAAC,CAAE;YAAC2B,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA5B,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACnJqB,WAAW,CAACrD,SAAS,CAAC;QAAA,eACzB,CAAC;MAEX,KAAKnB,QAAQ;QACT,oBACIP,OAAA,CAAAE,SAAA;UAAAoD,QAAA,gBACItD,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAO2D,KAAK,EAAE;cAACyB,WAAW,EAAC;YAAE,CAAE;YAACC,GAAG,EAAC,SAAS;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClF1D,OAAA;YAAO2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKhB,UAAU,CAACgB,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE5D,OAAQ;YAAC6D,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAkC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC/K1D,OAAA;YAAQ2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAM/B,WAAW,CAAC,CAAE;YAAC2B,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA5B,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAClJqB,WAAW,CAACrD,SAAS,CAAC;QAAA,eACzB,CAAC;MAEX,KAAKlB,QAAQ;QACT,oBACIR,OAAA,CAAAE,SAAA;UAAAoD,QAAA,gBACAtD,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACD1D,OAAA;YAAOqF,GAAG,EAAC,MAAM;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAA0B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5D1D,OAAA;YAAO2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKd,mBAAmB,CAACc,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE1D,gBAAiB;YAAC2D,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC;UAAiC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC9L1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAsD,QAAA,eAAGtD,OAAA;cAAAsD,QAAA,EAAG;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACpB1D,OAAA;YAAOqF,GAAG,EAAC,MAAM;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAA6B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC9D1D,OAAA;YACI2D,KAAK,EAAE;cAAE4B,KAAK,EAAE,GAAG;cAAES,MAAM,EAAE,EAAE;cAAEV,SAAS,EAAE,EAAE;cAAEW,MAAM,EAAE;YAAE,CAAE;YAC5DT,QAAQ,EAAGzC,CAAC,IAAKd,mBAAmB,CAACc,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE1D,gBAAiB;YAAAsB,QAAA,gBAE9EtD,OAAA;cAAQ0F,KAAK,EAAC,EAAE;cAAApC,QAAA,EAAC;YAAwB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACjDxC,KAAK,GACAA,KAAK,CACF4B,MAAM,CAAE5B,KAAK,IAAKA,KAAK,CAACkC,KAAK,CAACf,EAAE,KAAK,CAAC,CAAC,CACvC6D,GAAG,CAAEhF,KAAK,iBACPlB,OAAA;cAAgC0F,KAAK,EAAExE,KAAK,CAAC8B,WAAY;cAAAM,QAAA,GAAC,MAChD,EAACpC,KAAK,CAAC8B,WAAW,EAAC,YAAc,EAAC9B,KAAK,CAACL,MAAM,CAACsF,IAAI,EAAC,YAAc,EAACjF,KAAK,CAACL,MAAM,CAACuF,OAAO;YAAA,GADpFlF,KAAK,CAAC8B,WAAW;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEtB,CACX,CAAC,GACJ,IAAI,CAAC;YAAA;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEP,CAAC,eACT1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAEN1D,OAAA;YAAOqF,GAAG,EAAC,SAAS;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACzD1D,OAAA;YAAO2D,KAAK,EAAE;cAACkC,UAAU,EAAC,EAAE;cAAEP,SAAS,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKhB,UAAU,CAACgB,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE5D,OAAQ;YAAC6D,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAkC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5L1D,OAAA;YAAQ2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,CAAC;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAM/B,WAAW,CAAC,CAAE;YAAC2B,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA5B,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACzJqB,WAAW,CAACrD,SAAS,CAAC;QAAA,eACzB,CAAC;MAEP,KAAKjB,QAAQ;QACb,oBACIT,OAAA,CAAAE,SAAA;UAAAoD,QAAA,gBACItD,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAEN1D,OAAA;YAAO2D,KAAK,EAAE;cAAC2B,SAAS,EAAE,EAAE;cAACF,WAAW,EAAC;YAAE,CAAE;YAACC,GAAG,EAAC,SAAS;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAAiC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5G1D,OAAA;YAAO2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACI,IAAI,EAAC,QAAQ;YAACD,KAAK,EAAExD,QAAS;YAAC0D,WAAW,EAAC;UAAiC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAClI1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAO2D,KAAK,EAAE;cAACyB,WAAW,EAAC;YAAE,CAAE;YAACC,GAAG,EAAC,SAAS;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClF1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAO2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKhB,UAAU,CAACgB,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE5D,OAAQ;YAAC6D,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAoC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjL1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAQ2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAM/B,WAAW,CAAC,CAAE;YAAC2B,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA5B,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACnJqB,WAAW,CAACrD,SAAS,CAAC;QAAA,eACzB,CAAC;MAEP,KAAKhB,UAAU;QACf,oBACIV,OAAA,CAAAE,SAAA;UAAAoD,QAAA,gBACAtD,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACD1D,OAAA;YAAOqF,GAAG,EAAC,MAAM;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAA0B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5D1D,OAAA;YAAO2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKd,mBAAmB,CAACc,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE1D,gBAAiB;YAAC2D,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC;UAAiC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC9L1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN1D,OAAA;YAAOqF,GAAG,EAAC,SAAS;YAAA/B,QAAA,eAACtD,OAAA;cAAAsD,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACzD1D,OAAA;YAAO2D,KAAK,EAAE;cAACkC,UAAU,EAAC,EAAE;cAAEP,SAAS,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGzC,CAAC,IAAKhB,UAAU,CAACgB,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE5D,OAAQ;YAAC6D,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAkC;YAAArC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5L1D,OAAA;YAAQ2D,KAAK,EAAE;cAAE2B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,CAAC;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAM/B,WAAW,CAAC,CAAE;YAAC2B,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA5B,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACzJqB,WAAW,CAACrD,SAAS,CAAC;QAAA,eACzB,CAAC;IAGf;EAEJ;EAKA,oBACI1B,OAAA,CAAAE,SAAA;IAAAoD,QAAA,eAIItD,OAAA;MAAKkF,SAAS,EAAC,KAAK;MAAA5B,QAAA,eAEhBtD,OAAA;QAAKkF,SAAS,EAAC,eAAe;QAAA5B,QAAA,gBAC1BtD,OAAA;UAAAsD,QAAA,eAAItD,OAAA;YAAAsD,QAAA,EAAG;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B1D,OAAA;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN1D,OAAA;UAAAsD,QAAA,eAAGtD,OAAA;YAAAsD,QAAA,EAAID,SAAS,CAAC1C,KAAK;UAAC;YAAA4C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAChC1D,OAAA;UAAAsD,QAAA,eAAGtD,OAAA;YAAAsD,QAAA,EAAG;UAAsB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACpC1D,OAAA;UACI2D,KAAK,EAAE;YAAE2B,SAAS,EAAE,EAAE;YAAEW,MAAM,EAAE;UAAE,CAAE;UACpCT,QAAQ,EAAGzC,CAAC,IAAK9B,iBAAiB,CAAC8B,CAAC,CAAC0C,MAAM,CAACC,KAAK,CAAE;UAAApC,QAAA,gBAEnDtD,OAAA;YAAQ0F,KAAK,EAAC,EAAE;YAAApC,QAAA,EAAE;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACjDtC,eAAe,gBACZpB,OAAA,CAAAE,SAAA;YAAAoD,QAAA,EACKlC,eAAe,CAAC8E,GAAG,CAAEG,CAAC,iBACnBrG,OAAA;cAAmB0F,KAAK,EAAEW,CAAC,CAAChE,EAAG;cAAAiB,QAAA,EAC1B+C,CAAC,CAAC7B;YAAe,GADT6B,CAAC,CAAChE,EAAE;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAET,CACX;UAAC,gBACJ,CAAC,gBAEH1D,OAAA,CAAAE,SAAA,mBACE,CACL;QAAA;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,EAERyB,UAAU,CAACnE,cAAc,CAAC;MAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBAQR,CAAC;AAEX;AAACrD,EAAA,CA5kBuBF,gBAAgB;EAAA,QAQtBf,WAAW,EACVA,WAAW,EACTD,WAAW,EACZQ,UAAU;AAAA;AAAA2G,EAAA,GAXNnG,gBAAgB;AAAA,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}