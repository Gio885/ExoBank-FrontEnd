{"ast":null,"code":"import { URL_LISTA_CONTI, URL_LISTA_STATO_CONTO, URL_LISTA_TIPO_TRANSAZIONE, URL_LISTA_TRANSAZIONI_ADMIN, URL_LOGIN_ADMIN, URL_STATI_TRANSAZIONE, URL_UPDATE_CONTO, URL_UPDATE_TRANSAZIONE } from \"../utility/Endpoint\";\nimport axios from \"axios\";\n\n/*async: Questa parola chiave viene utilizzata prima di una funzione per dichiararla come asincrona.\r\n Le funzioni asincrone possono contenere l'operatore await. Quando una funzione è dichiarata come asincrona, \r\n questa restituirà sempre una promessa implicitamente.\r\n\r\nawait: Questa parola chiave può essere utilizzata all'interno di una funzione asincrona per \"attendere\" il completamento di una promessa.\r\n Quando si utilizza await su una promessa, la funzione asincrona si \"blocca\" finché la promessa non viene risolta o rigettata. \r\n Questo consente di scrivere codice asincrono in uno stile più simile al codice sincrono.\r\n*/\n\nexport async function loginAdmin(admin) {\n  return await axios.post(URL_LOGIN_ADMIN, admin);\n}\nexport async function listaConti(setConti, conto) {\n  return await axios.get(URL_LISTA_CONTI).then(response => {\n    if (response.data.success) {\n      setConti(response.data.data.filter(e => e.numeroConto != conto.numeroConto));\n    }\n  }).catch(error => {\n    console.error(\"Qualcosa è andato storto\", error);\n  });\n}\nexport async function listaStatiConto(setStati) {\n  return await axios.get(URL_LISTA_STATO_CONTO).then(response => {\n    setStati(response.data);\n  });\n}\nexport async function updateConto(conto) {\n  return await axios.put(URL_UPDATE_CONTO, conto);\n}\nexport async function listaTransazioniAdmin() {\n  return await axios.get(URL_LISTA_TRANSAZIONI_ADMIN);\n}\nexport async function listaStatiTransazione() {\n  return await axios.get(URL_STATI_TRANSAZIONE);\n}\nexport async function updateTransazione(transazione) {\n  return await axios.put(URL_UPDATE_TRANSAZIONE, transazione);\n}\nexport async function listaTipoTransazione(setListaOperazioni) {\n  return await axios.get(URL_LISTA_TIPO_TRANSAZIONE).then(response => {\n    if (response.data) {\n      setListaOperazioni(response.data);\n    }\n  }).catch(error => {\n    console.error(\"Qualcosa è andato storto\", error);\n  });\n}","map":{"version":3,"names":["URL_LISTA_CONTI","URL_LISTA_STATO_CONTO","URL_LISTA_TIPO_TRANSAZIONE","URL_LISTA_TRANSAZIONI_ADMIN","URL_LOGIN_ADMIN","URL_STATI_TRANSAZIONE","URL_UPDATE_CONTO","URL_UPDATE_TRANSAZIONE","axios","loginAdmin","admin","post","listaConti","setConti","conto","get","then","response","data","success","filter","e","numeroConto","catch","error","console","listaStatiConto","setStati","updateConto","put","listaTransazioniAdmin","listaStatiTransazione","updateTransazione","transazione","listaTipoTransazione","setListaOperazioni"],"sources":["C:/Sviluppo/react/exobank/src/service/adminService.js"],"sourcesContent":["import { URL_LISTA_CONTI, URL_LISTA_STATO_CONTO, URL_LISTA_TIPO_TRANSAZIONE, URL_LISTA_TRANSAZIONI_ADMIN, URL_LOGIN_ADMIN, URL_STATI_TRANSAZIONE, URL_UPDATE_CONTO, URL_UPDATE_TRANSAZIONE } from \"../utility/Endpoint\";\r\nimport axios from \"axios\"\r\n\r\n\r\n/*async: Questa parola chiave viene utilizzata prima di una funzione per dichiararla come asincrona.\r\n Le funzioni asincrone possono contenere l'operatore await. Quando una funzione è dichiarata come asincrona, \r\n questa restituirà sempre una promessa implicitamente.\r\n\r\nawait: Questa parola chiave può essere utilizzata all'interno di una funzione asincrona per \"attendere\" il completamento di una promessa.\r\n Quando si utilizza await su una promessa, la funzione asincrona si \"blocca\" finché la promessa non viene risolta o rigettata. \r\n Questo consente di scrivere codice asincrono in uno stile più simile al codice sincrono.\r\n*/\r\n\r\nexport async function loginAdmin(admin){\r\n    return await axios.post(URL_LOGIN_ADMIN,admin)\r\n}\r\n\r\nexport async function listaConti(setConti,conto){\r\n    return await axios.get(URL_LISTA_CONTI).then((response) => {\r\n        if (response.data.success) {\r\n            setConti(response.data.data.filter((e) => e.numeroConto != conto.numeroConto))\r\n        }\r\n    }).catch(error => {\r\n        console.error(\"Qualcosa è andato storto\", error)\r\n    })\r\n\r\n}\r\n\r\nexport async function listaStatiConto(setStati){\r\n    return await axios.get(URL_LISTA_STATO_CONTO).then((response) => {\r\n        setStati(response.data)\r\n    })\r\n}\r\nexport async function updateConto(conto){\r\n    return await axios.put(URL_UPDATE_CONTO,conto)\r\n}\r\nexport async function listaTransazioniAdmin(){\r\n    return await axios.get(URL_LISTA_TRANSAZIONI_ADMIN)\r\n}\r\nexport async function listaStatiTransazione(){\r\n    return await axios.get(URL_STATI_TRANSAZIONE)\r\n}\r\nexport async function updateTransazione(transazione){\r\n    return await axios.put(URL_UPDATE_TRANSAZIONE,transazione)\r\n}\r\nexport async function listaTipoTransazione(setListaOperazioni){\r\n    return await axios.get(URL_LISTA_TIPO_TRANSAZIONE).then((response) => {\r\n        if (response.data) {\r\n            setListaOperazioni(response.data)\r\n        }\r\n    }).catch(error => {\r\n        console.error(\"Qualcosa è andato storto\", error)\r\n    })\r\n}"],"mappings":"AAAA,SAASA,eAAe,EAAEC,qBAAqB,EAAEC,0BAA0B,EAAEC,2BAA2B,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,gBAAgB,EAAEC,sBAAsB,QAAQ,qBAAqB;AACvN,OAAOC,KAAK,MAAM,OAAO;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,UAAUA,CAACC,KAAK,EAAC;EACnC,OAAO,MAAMF,KAAK,CAACG,IAAI,CAACP,eAAe,EAACM,KAAK,CAAC;AAClD;AAEA,OAAO,eAAeE,UAAUA,CAACC,QAAQ,EAACC,KAAK,EAAC;EAC5C,OAAO,MAAMN,KAAK,CAACO,GAAG,CAACf,eAAe,CAAC,CAACgB,IAAI,CAAEC,QAAQ,IAAK;IACvD,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;MACvBN,QAAQ,CAACI,QAAQ,CAACC,IAAI,CAACA,IAAI,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,IAAIR,KAAK,CAACQ,WAAW,CAAC,CAAC;IAClF;EACJ,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EACpD,CAAC,CAAC;AAEN;AAEA,OAAO,eAAeE,eAAeA,CAACC,QAAQ,EAAC;EAC3C,OAAO,MAAMnB,KAAK,CAACO,GAAG,CAACd,qBAAqB,CAAC,CAACe,IAAI,CAAEC,QAAQ,IAAK;IAC7DU,QAAQ,CAACV,QAAQ,CAACC,IAAI,CAAC;EAC3B,CAAC,CAAC;AACN;AACA,OAAO,eAAeU,WAAWA,CAACd,KAAK,EAAC;EACpC,OAAO,MAAMN,KAAK,CAACqB,GAAG,CAACvB,gBAAgB,EAACQ,KAAK,CAAC;AAClD;AACA,OAAO,eAAegB,qBAAqBA,CAAA,EAAE;EACzC,OAAO,MAAMtB,KAAK,CAACO,GAAG,CAACZ,2BAA2B,CAAC;AACvD;AACA,OAAO,eAAe4B,qBAAqBA,CAAA,EAAE;EACzC,OAAO,MAAMvB,KAAK,CAACO,GAAG,CAACV,qBAAqB,CAAC;AACjD;AACA,OAAO,eAAe2B,iBAAiBA,CAACC,WAAW,EAAC;EAChD,OAAO,MAAMzB,KAAK,CAACqB,GAAG,CAACtB,sBAAsB,EAAC0B,WAAW,CAAC;AAC9D;AACA,OAAO,eAAeC,oBAAoBA,CAACC,kBAAkB,EAAC;EAC1D,OAAO,MAAM3B,KAAK,CAACO,GAAG,CAACb,0BAA0B,CAAC,CAACc,IAAI,CAAEC,QAAQ,IAAK;IAClE,IAAIA,QAAQ,CAACC,IAAI,EAAE;MACfiB,kBAAkB,CAAClB,QAAQ,CAACC,IAAI,CAAC;IACrC;EACJ,CAAC,CAAC,CAACK,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EACpD,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}