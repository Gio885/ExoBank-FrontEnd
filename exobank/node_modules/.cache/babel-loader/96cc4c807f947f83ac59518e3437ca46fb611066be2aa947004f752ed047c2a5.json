{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sviluppo\\\\react\\\\exobank\\\\src\\\\components\\\\OperazioniUtente.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Deposito from \"./Deposito\";\nimport Prelievo from \"./Prelievo\";\nimport { ERRORE, INDEX_UTENTE } from \"../utility/Route\";\nimport { insertTransazione } from \"../service/utenteService\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { listaConti, listaTipoTransazione } from \"../service/adminService\";\nimport { setConto } from \"../store/slice/contoSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function OperazioniUtente({\n  setErrore\n}) {\n  _s();\n  const DEPOSITO = \"1\";\n  const PRELIEVO = \"2\";\n  const BONIFICO = \"3\";\n  const RICARICA = \"4\";\n  const BOLLETTINO = \"5\";\n  const conto = useSelector(state => state.conto);\n  const [importoDeposito, setImportoDeposito] = useState();\n  const [importoPrelevare, setImportoPrelevare] = useState();\n  const [importoBonifico, setImportoBonifico] = useState();\n  const history = useHistory();\n  const [contoBenef, setContoBenef] = useState();\n  const [tipoOperazione, setTipoOperazione] = useState();\n  const [conti, setConti] = useState();\n  const [listaOperazioni, setListaOperazioni] = useState();\n  const [visibile, setVisibile] = useState(false);\n  const [messaggio, setMessaggio] = useState(\"\");\n  const [aggiornamento, setAggiornamento] = useState(false);\n  const [importo, setImporto] = useState();\n  useEffect(() => {\n    listaConti().then(response => {\n      if (response.data.success) {\n        setConti(response.data.data.filter(e => e.numeroConto != conto.numeroConto));\n      }\n    }).catch(error => {\n      console.error(\"Qualcosa è andato storto\", error);\n    });\n    listaTipoTransazione().then(response => {\n      if (response.data) {\n        setListaOperazioni(response.data);\n      }\n    }).catch(error => {\n      console.error(\"Qualcosa è andato storto\", error);\n    });\n    if (conto.stato) {\n      if (conto.stato.id == 2 || conto.stato.id == 3) {\n        const errore = {\n          titoloErrore: \"CONTO CHIUSO O DISABILITATO\",\n          descrizioneErrore: \"Siamo spiacenti ma non puoi effetturare operazioni su questo conto\"\n        };\n        setErrore(errore);\n        history.push(ERRORE);\n      }\n    }\n    findContoUtente(utente).then(response => {\n      if (response.data.success) {\n        dispatch(setConto(response.data.data));\n      } else {\n        dispatch(setConto(\"\"));\n      }\n    }).catch(error => {\n      if (error.response.data) {\n        setVisibile(true);\n        setMessaggio(error.response.data);\n      } else {\n        setVisibile(true);\n        setMessaggio(\"Errore sconosciuto\");\n      }\n    });\n  }, [aggiornamento]);\n  function datiConto(conto) {\n    if (!conto) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Non hai un conto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Numero conto:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), \" \", conto.numeroConto]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Stato conto:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), \" \", conto.stato ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: conto.stato.statoContoCorrente\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: -10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Saldo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), \" \\u20AC \", conto.saldo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: conto.saldo.toFixed(2)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n  }\n  function effettuaDeposito() {\n    const contoAggiornato = {\n      ...conto\n    };\n    const tipo = {\n      id: 1\n    };\n    const statoTransazione = {\n      id: 1\n    };\n    const transazione = {\n      conto: {\n        ...contoAggiornato\n      },\n      importo: importoDeposito,\n      tipo: tipo,\n      statoTransazione: statoTransazione\n    };\n    console.log(transazione);\n    insertTransazione(transazione).then(response => {\n      if (response.data) {\n        alert(\"la tua richiesta è stata presa in carico\");\n        history.push(INDEX_UTENTE);\n      }\n    }).catch(error => {\n      alert(error.response.data);\n    });\n  }\n  function preleva() {\n    if (importoPrelevare) {\n      const tipo = {\n        id: 2\n      };\n      const statoTransazione = {\n        id: 3\n      };\n      const transazione = {\n        conto: {\n          ...conto\n        },\n        importo: importoPrelevare,\n        tipo: tipo,\n        statoTransazione: statoTransazione\n      };\n      insertTransazione(transazione).then(response => {\n        if (response.data) {\n          alert(\"la tua richiesta è stata presa in carico\");\n          history.push(INDEX_UTENTE);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      const errore = {\n        titoloErrore: \"OPERAZIONE NON CONSENTITA\",\n        descrizioneErrore: \"L'importo da prelevare supera il credito disponibile\"\n      };\n      setErrore(errore);\n      history.push(ERRORE);\n    }\n  }\n  function bonifico() {\n    if (importoBonifico < conto.saldo) {\n      const statoTransazione = {\n        id: 3\n      };\n      const tipoTransazione = {\n        id: 3\n      };\n      //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\n      const contoB = conti.find(conti => conti.numeroConto === contoBenef); //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\n      // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\n\n      const transazione = {\n        conto: {\n          ...conto\n        },\n        importo: importoBonifico,\n        tipo: tipoTransazione,\n        statoTransazione: statoTransazione,\n        contoBeneficiario: contoB\n      };\n      insertTransazione(transazione).then(response => {\n        if (response.data) {\n          alert(\"la tua richiesta è stata presa in carico\");\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      alert(\"importo superiore al saldo conto\");\n    }\n  }\n  function transazione() {\n    switch (tipoOperazione) {\n      case DEPOSITO:\n        {\n          const contoAggiornato = {\n            ...conto\n          };\n          const tipo = {\n            id: 1\n          };\n          const statoTransazione = {\n            id: 1\n          };\n          const transazione = {\n            conto: {\n              ...contoAggiornato\n            },\n            importo: importo,\n            tipo: tipo,\n            statoTransazione: statoTransazione\n          };\n          if (importo < 1000) {\n            insertTransazione(transazione).then(response => {\n              if (response.data) {\n                setVisibile(true);\n                setAggiornamento(!aggiornamento);\n                setImporto(\"\");\n                const importoNumero = parseFloat(importo);\n                const importoFormattato = importoNumero.toFixed(2);\n                setMessaggio(\"Hai depositato un importo di € \" + importoFormattato + \" sul tuo conto numero \" + conto.numeroConto);\n              }\n            }).catch(error => {\n              if (error.response) {\n                if (error.response.data) {\n                  setVisibile(true);\n                  setMessaggio(error.response.data);\n                }\n              } else {\n                setMessaggio(\"Errore sconosciuto\");\n              }\n            });\n          } else {\n            setMessaggio(\"Non è possibile effettuare depositi sopra € 1000.00\");\n            setAggiornamento(!aggiornamento);\n            setVisibile(true);\n            setImporto(\"\");\n          }\n          break;\n        }\n      case PRELIEVO:\n        {\n          break;\n        }\n      case BONIFICO:\n        {\n          break;\n        }\n      case RICARICA:\n        {\n          break;\n        }\n      case BOLLETTINO:\n        {\n          break;\n        }\n    }\n  }\n  function errorBanner(messaggio) {\n    if (visibile) {\n      setTimeout(() => {\n        setVisibile(false);\n        setMessaggio(\"\");\n      }, 5000);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"black\"\n        },\n        className: \"error-banner\",\n        children: messaggio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Altrimenti, non renderizzare nulla\n      return null;\n    }\n  }\n  function operazione(tipoOperazione) {\n    switch (tipoOperazione) {\n      case DEPOSITO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo da depositare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"DEPOSITA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case PRELIEVO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImportoPrelevare(e.target.value),\n            type: \"number\",\n            placeholder: \"Inserisci l'importo da prelevare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => preleva(),\n            type: \"button\",\n            className: \"\",\n            children: \"PRELEVA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true);\n      case BONIFICO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setContoBenef(e.target.value),\n            type: \"text\",\n            placeholder: \"Inserisci IBAN del beneficiario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Oppure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              width: 400,\n              height: 40,\n              marginTop: 10,\n              margin: 5\n            },\n            onChange: e => setContoBenef(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \" \\xA0Seleziona un IBAN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 29\n            }, this), conti.filter(conti => conti.stato.id === 1) // Filtra gli IBAN con stato.id === 1\n            .map(conti => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: conti.numeroConto,\n              children: [\"\\xA0\", conti.numeroConto, \" \\xA0\\xA0 \", conti.utente.nome, \" \\xA0\\xA0 \", conti.utente.cognome]\n            }, conti.numeroConto, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImportoBonifico(e.target.value),\n            type: \"number\",\n            placeholder: \"Inserisci l'importo del bonifico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => bonifico(),\n            type: \"button\",\n            className: \"\",\n            children: \"FAI UN BONIFICO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"div-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"DATI CONTO:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: datiConto(conto)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Effettua un operazione\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          style: {\n            marginTop: 10,\n            margin: 5\n          },\n          onChange: e => setTipoOperazione(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Seleziona un operazione\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this), listaOperazioni ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: listaOperazioni.map(o => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: o.id,\n              children: o.tipoTransazione\n            }, o.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 37\n            }, this))\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this), operazione(tipoOperazione)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(OperazioniUtente, \"pVd+a5hZnf4yScLzSTMuGGN5Cfg=\", false, function () {\n  return [useSelector, useHistory];\n});\n_c = OperazioniUtente;\nvar _c;\n$RefreshReg$(_c, \"OperazioniUtente\");","map":{"version":3,"names":["useEffect","useState","useSelector","Deposito","Prelievo","ERRORE","INDEX_UTENTE","insertTransazione","useHistory","listaConti","listaTipoTransazione","setConto","jsxDEV","_jsxDEV","Fragment","_Fragment","OperazioniUtente","setErrore","_s","DEPOSITO","PRELIEVO","BONIFICO","RICARICA","BOLLETTINO","conto","state","importoDeposito","setImportoDeposito","importoPrelevare","setImportoPrelevare","importoBonifico","setImportoBonifico","history","contoBenef","setContoBenef","tipoOperazione","setTipoOperazione","conti","setConti","listaOperazioni","setListaOperazioni","visibile","setVisibile","messaggio","setMessaggio","aggiornamento","setAggiornamento","importo","setImporto","then","response","data","success","filter","e","numeroConto","catch","error","console","stato","id","errore","titoloErrore","descrizioneErrore","push","findContoUtente","utente","dispatch","datiConto","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","statoContoCorrente","saldo","toFixed","effettuaDeposito","contoAggiornato","tipo","statoTransazione","transazione","log","alert","preleva","bonifico","tipoTransazione","contoB","find","contoBeneficiario","importoNumero","parseFloat","importoFormattato","errorBanner","setTimeout","color","className","operazione","marginRight","for","marginTop","width","onChange","target","value","type","placeholder","marginLeft","padding","onClick","height","margin","map","nome","cognome","o","_c","$RefreshReg$"],"sources":["C:/Sviluppo/react/exobank/src/components/OperazioniUtente.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Deposito from \"./Deposito\";\r\nimport Prelievo from \"./Prelievo\";\r\nimport { ERRORE, INDEX_UTENTE } from \"../utility/Route\";\r\nimport { insertTransazione } from \"../service/utenteService\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { listaConti, listaTipoTransazione } from \"../service/adminService\";\r\nimport { setConto } from \"../store/slice/contoSlice\";\r\n\r\n\r\n\r\nexport default function OperazioniUtente({ setErrore }) {\r\n\r\n\r\n    const DEPOSITO = \"1\"\r\n    const PRELIEVO = \"2\"\r\n    const BONIFICO = \"3\" \r\n    const RICARICA = \"4\"\r\n    const BOLLETTINO = \"5\"\r\n    const conto = useSelector(state => state.conto);\r\n    const [importoDeposito, setImportoDeposito] = useState();\r\n    const [importoPrelevare, setImportoPrelevare] = useState();\r\n    const [importoBonifico, setImportoBonifico] = useState();\r\n    const history = useHistory();\r\n    const [contoBenef, setContoBenef] = useState();\r\n    const [tipoOperazione, setTipoOperazione] = useState();\r\n    const [conti, setConti] = useState();\r\n    const [listaOperazioni,setListaOperazioni] = useState();\r\n    const [visibile,setVisibile] = useState(false)\r\n    const [messaggio,setMessaggio]= useState(\"\")\r\n    const [aggiornamento,setAggiornamento] = useState(false)\r\n    const [importo,setImporto] = useState();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        listaConti().then((response) => {\r\n            if (response.data.success) {\r\n                setConti(response.data.data.filter((e) =>e.numeroConto != conto.numeroConto))\r\n            }\r\n        }).catch(error => {\r\n            console.error(\"Qualcosa è andato storto\",error)\r\n           })\r\n\r\n        listaTipoTransazione().then((response)=>{\r\n        if(response.data){\r\n            setListaOperazioni(response.data)\r\n        }\r\n        }).catch(error => {\r\n           console.error(\"Qualcosa è andato storto\",error)\r\n          })\r\n\r\n\r\n\r\n\r\n        if (conto.stato) {\r\n            if (conto.stato.id == 2 || conto.stato.id == 3) {\r\n                const errore = {\r\n                    titoloErrore: \"CONTO CHIUSO O DISABILITATO\",\r\n                    descrizioneErrore: \"Siamo spiacenti ma non puoi effetturare operazioni su questo conto\"\r\n\r\n                }\r\n                setErrore(errore);\r\n                history.push(ERRORE)\r\n            }\r\n        }\r\n\r\n        \r\n        findContoUtente(utente).then((response) => {\r\n            if (response.data.success) {\r\n                dispatch(setConto(response.data.data))\r\n            }else{\r\n                dispatch(setConto(\"\"))\r\n            }\r\n        }).catch(error => {\r\n            if (error.response.data) {\r\n              setVisibile(true)\r\n              setMessaggio(error.response.data)\r\n            } else {\r\n              setVisibile(true)\r\n              setMessaggio(\"Errore sconosciuto\");\r\n            }\r\n          })\r\n\r\n    }, [aggiornamento])\r\n\r\n\r\n    function datiConto(conto) {\r\n        if (!conto) {\r\n            return <p>Non hai un conto</p>;\r\n        } else {\r\n            return (\r\n                <>\r\n                    <p style={{ marginBottom: 0 }}>\r\n                        <b>Numero conto:</b> {conto.numeroConto}\r\n                    </p>\r\n                    <p style={{ marginBottom: 0 }}>\r\n                        <b>Stato conto:</b> {(conto.stato) ? <>{conto.stato.statoContoCorrente}</> : <></>}\r\n                    </p>\r\n                    <p style={{ marginBottom: -10 }}>\r\n                        <b>Saldo:</b> € {(conto.saldo) ? <>{conto.saldo.toFixed(2)}</> : <></>}\r\n                    </p>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function effettuaDeposito() {\r\n        const contoAggiornato = { ...conto }\r\n        const tipo = {\r\n            id: 1\r\n        }\r\n        const statoTransazione = {\r\n            id: 1\r\n        }\r\n        const transazione = {\r\n            conto: { ...contoAggiornato },\r\n            importo: importoDeposito,\r\n            tipo: tipo,\r\n            statoTransazione: statoTransazione,\r\n        }\r\n        console.log(transazione)\r\n        insertTransazione(transazione).then((response) => {\r\n            if (response.data) {\r\n                alert(\"la tua richiesta è stata presa in carico\")\r\n                history.push(INDEX_UTENTE)\r\n            }\r\n        }).catch(error => {\r\n            alert(error.response.data)\r\n        })\r\n\r\n    }\r\n\r\n    function preleva() {\r\n        if (importoPrelevare) {\r\n            const tipo = {\r\n                id: 2\r\n            }\r\n            const statoTransazione = {\r\n                id: 3\r\n            }\r\n            const transazione = {\r\n                conto: { ...conto },\r\n                importo: (importoPrelevare),\r\n                tipo: tipo,\r\n                statoTransazione: statoTransazione\r\n            }\r\n            insertTransazione(transazione).then((response) => {\r\n                if (response.data) {\r\n                    alert(\"la tua richiesta è stata presa in carico\")\r\n                    history.push(INDEX_UTENTE)\r\n                }\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        } else {\r\n            const errore = {\r\n                titoloErrore: \"OPERAZIONE NON CONSENTITA\",\r\n                descrizioneErrore: \"L'importo da prelevare supera il credito disponibile\"\r\n            }\r\n            setErrore(errore)\r\n            history.push(ERRORE)\r\n        }\r\n    }\r\n\r\n    function bonifico(){\r\n        if(importoBonifico<conto.saldo){\r\n            const statoTransazione={\r\n                id:3\r\n            }\r\n            const tipoTransazione={\r\n                id:3\r\n            }\r\n            //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\r\n            const contoB = conti.find((conti)=>conti.numeroConto === contoBenef)   //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\r\n                                                                                                // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\r\n\r\n            const transazione = {\r\n                conto:{...conto},\r\n                importo: importoBonifico,\r\n                tipo:tipoTransazione,\r\n                statoTransazione:statoTransazione,\r\n                contoBeneficiario:contoB,\r\n            }\r\n            insertTransazione(transazione).then((response)=>{\r\n                if(response.data) {\r\n                    alert(\"la tua richiesta è stata presa in carico\")\r\n                }\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        }else{\r\n            alert(\"importo superiore al saldo conto\")\r\n        }\r\n    }\r\n\r\n    function transazione (){\r\n        switch (tipoOperazione){\r\n\r\n            case DEPOSITO:{\r\n                const contoAggiornato = {...conto}\r\n                const tipo={\r\n                    id:1\r\n                }\r\n                const statoTransazione={\r\n                    id:1\r\n                }    \r\n                const transazione = {\r\n                    conto:{...contoAggiornato},\r\n                    importo:importo,\r\n                    tipo:tipo,\r\n                    statoTransazione:statoTransazione,\r\n                }\r\n                if(importo<1000){\r\n                    insertTransazione(transazione).then ((response)=>{\r\n                        if(response.data){\r\n                            setVisibile(true)\r\n                            setAggiornamento(!aggiornamento)\r\n                            setImporto(\"\")\r\n                            const importoNumero = parseFloat(importo)\r\n                            const importoFormattato = importoNumero.toFixed(2);\r\n                            setMessaggio(\"Hai depositato un importo di € \"+importoFormattato+\" sul tuo conto numero \"+conto.numeroConto)\r\n                        }\r\n                    }).catch(error => {\r\n                        if(error.response){\r\n                            if (error.response.data) {\r\n                                setVisibile(true)\r\n                                setMessaggio(error.response.data)\r\n                            }\r\n                        }\r\n                        else {\r\n                        setMessaggio(\"Errore sconosciuto\");\r\n                        }\r\n                    }) \r\n                }else{\r\n                    setMessaggio(\"Non è possibile effettuare depositi sopra € 1000.00\")\r\n                    setAggiornamento(!aggiornamento)\r\n                    setVisibile(true)\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case PRELIEVO:{\r\n                break;\r\n            }\r\n            case BONIFICO:{\r\n                break;\r\n            }\r\n            case RICARICA:{\r\n                break;\r\n            }\r\n            case BOLLETTINO:{\r\n                break;\r\n            }\r\n           \r\n\r\n        }\r\n    }\r\n\r\n    function errorBanner(messaggio) {\r\n\r\n        if (visibile) {\r\n            setTimeout(() => {\r\n                setVisibile(false);\r\n                setMessaggio(\"\");\r\n            }, 5000);\r\n            return (\r\n                <div style={{ color: \"black\" }} className=\"error-banner\">\r\n                    {messaggio}\r\n                </div>\r\n            );\r\n        } else {\r\n            // Altrimenti, non renderizzare nulla\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function operazione(tipoOperazione) {\r\n\r\n\r\n        switch (tipoOperazione) {\r\n            case DEPOSITO:\r\n                return (\r\n                    <>\r\n                    <br />\r\n                        <label style={{marginRight:10}} for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo da depositare\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">DEPOSITA</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n            case PRELIEVO:\r\n                return (\r\n                    <>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImportoPrelevare(e.target.value)} type=\"number\" placeholder=\"Inserisci l'importo da prelevare\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => preleva()} type=\"button\" className=\"\">PRELEVA</button>\r\n                    </>\r\n                )\r\n            case BONIFICO:\r\n                return (\r\n                    <>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setContoBenef(e.target.value)} type=\"text\" placeholder=\"Inserisci IBAN del beneficiario\"></input>\r\n                        <br />\r\n                        <p><b>Oppure</b></p>\r\n                        <select\r\n                            style={{ width: 400, height: 40, marginTop: 10, margin: 5 }}\r\n                            onChange={(e) => setContoBenef(e.target.value)}\r\n                        >\r\n                            <option value=\"\"> &nbsp;Seleziona un IBAN</option>\r\n                            {conti\r\n                                .filter((conti) => conti.stato.id === 1) // Filtra gli IBAN con stato.id === 1\r\n                                .map((conti) => (\r\n                                    <option key={conti.numeroConto} value={conti.numeroConto}>\r\n                                        &nbsp;{conti.numeroConto} &nbsp;&nbsp; {conti.utente.nome} &nbsp;&nbsp; {conti.utente.cognome}\r\n                                    </option>\r\n                                ))}\r\n                        </select>\r\n                        <br />\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImportoBonifico(e.target.value)} type=\"number\" placeholder=\"Inserisci l'importo del bonifico\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => bonifico()} type=\"button\" className=\"\">FAI UN BONIFICO</button>\r\n                    </>\r\n                )\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <div className=\"div\">\r\n\r\n                <div className=\"div-container\">\r\n                    <h3><b>DATI CONTO:</b></h3>\r\n                    <br />\r\n                    <p><b>{datiConto(conto)}</b></p>\r\n                    <p><b>Effettua un operazione</b></p>\r\n                    <select\r\n                        style={{ marginTop: 10, margin: 5 }}\r\n                        onChange={(e) => setTipoOperazione(e.target.value)}\r\n                    >\r\n                        <option value=\"\" >Seleziona un operazione</option>\r\n                        {listaOperazioni ? (\r\n                            <>\r\n                                {listaOperazioni.map((o) => (\r\n                                    <option key={o.id} value={o.id}>\r\n                                        {o.tipoTransazione}\r\n                                    </option>\r\n                                ))}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                            </>\r\n                        )}\r\n                    </select>\r\n\r\n                    {operazione(tipoOperazione)}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,MAAM,EAAEC,YAAY,QAAQ,kBAAkB;AACvD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,UAAU,QAAQ,2CAA2C;AACtE,SAASC,UAAU,EAAEC,oBAAoB,QAAQ,yBAAyB;AAC1E,SAASC,QAAQ,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAIrD,eAAe,SAASC,gBAAgBA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAGpD,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,UAAU,GAAG,GAAG;EACtB,MAAMC,KAAK,GAAGtB,WAAW,CAACuB,KAAK,IAAIA,KAAK,CAACD,KAAK,CAAC;EAC/C,MAAM,CAACE,eAAe,EAAEC,kBAAkB,CAAC,GAAG1B,QAAQ,CAAC,CAAC;EACxD,MAAM,CAAC2B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG5B,QAAQ,CAAC,CAAC;EAC1D,MAAM,CAAC6B,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,CAAC;EACxD,MAAM+B,OAAO,GAAGxB,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,CAAC;EAC9C,MAAM,CAACkC,cAAc,EAAEC,iBAAiB,CAAC,GAAGnC,QAAQ,CAAC,CAAC;EACtD,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,CAAC;EACpC,MAAM,CAACsC,eAAe,EAACC,kBAAkB,CAAC,GAAGvC,QAAQ,CAAC,CAAC;EACvD,MAAM,CAACwC,QAAQ,EAACC,WAAW,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC9C,MAAM,CAAC0C,SAAS,EAACC,YAAY,CAAC,GAAE3C,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC4C,aAAa,EAACC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EACxD,MAAM,CAAC8C,OAAO,EAACC,UAAU,CAAC,GAAG/C,QAAQ,CAAC,CAAC;EAIvCD,SAAS,CAAC,MAAM;IACZS,UAAU,CAAC,CAAC,CAACwC,IAAI,CAAEC,QAAQ,IAAK;MAC5B,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;QACvBd,QAAQ,CAACY,QAAQ,CAACC,IAAI,CAACA,IAAI,CAACE,MAAM,CAAEC,CAAC,IAAIA,CAAC,CAACC,WAAW,IAAI/B,KAAK,CAAC+B,WAAW,CAAC,CAAC;MACjF;IACJ,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAACA,KAAK,CAAC;IAChD,CAAC,CAAC;IAEL/C,oBAAoB,CAAC,CAAC,CAACuC,IAAI,CAAEC,QAAQ,IAAG;MACxC,IAAGA,QAAQ,CAACC,IAAI,EAAC;QACbX,kBAAkB,CAACU,QAAQ,CAACC,IAAI,CAAC;MACrC;IACA,CAAC,CAAC,CAACK,KAAK,CAACC,KAAK,IAAI;MACfC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAACA,KAAK,CAAC;IAChD,CAAC,CAAC;IAKJ,IAAIjC,KAAK,CAACmC,KAAK,EAAE;MACb,IAAInC,KAAK,CAACmC,KAAK,CAACC,EAAE,IAAI,CAAC,IAAIpC,KAAK,CAACmC,KAAK,CAACC,EAAE,IAAI,CAAC,EAAE;QAC5C,MAAMC,MAAM,GAAG;UACXC,YAAY,EAAE,6BAA6B;UAC3CC,iBAAiB,EAAE;QAEvB,CAAC;QACD9C,SAAS,CAAC4C,MAAM,CAAC;QACjB7B,OAAO,CAACgC,IAAI,CAAC3D,MAAM,CAAC;MACxB;IACJ;IAGA4D,eAAe,CAACC,MAAM,CAAC,CAACjB,IAAI,CAAEC,QAAQ,IAAK;MACvC,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;QACvBe,QAAQ,CAACxD,QAAQ,CAACuC,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC;MAC1C,CAAC,MAAI;QACDgB,QAAQ,CAACxD,QAAQ,CAAC,EAAE,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC,CAAC6C,KAAK,CAACC,KAAK,IAAI;MACd,IAAIA,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;QACvBT,WAAW,CAAC,IAAI,CAAC;QACjBE,YAAY,CAACa,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;MACnC,CAAC,MAAM;QACLT,WAAW,CAAC,IAAI,CAAC;QACjBE,YAAY,CAAC,oBAAoB,CAAC;MACpC;IACF,CAAC,CAAC;EAER,CAAC,EAAE,CAACC,aAAa,CAAC,CAAC;EAGnB,SAASuB,SAASA,CAAC5C,KAAK,EAAE;IACtB,IAAI,CAACA,KAAK,EAAE;MACR,oBAAOX,OAAA;QAAAwD,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAClC,CAAC,MAAM;MACH,oBACI5D,OAAA,CAAAE,SAAA;QAAAsD,QAAA,gBACIxD,OAAA;UAAG6D,KAAK,EAAE;YAAEC,YAAY,EAAE;UAAE,CAAE;UAAAN,QAAA,gBAC1BxD,OAAA;YAAAwD,QAAA,EAAG;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,KAAC,EAACjD,KAAK,CAAC+B,WAAW;QAAA;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,eACJ5D,OAAA;UAAG6D,KAAK,EAAE;YAAEC,YAAY,EAAE;UAAE,CAAE;UAAAN,QAAA,gBAC1BxD,OAAA;YAAAwD,QAAA,EAAG;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,KAAC,EAAEjD,KAAK,CAACmC,KAAK,gBAAI9C,OAAA,CAAAE,SAAA;YAAAsD,QAAA,EAAG7C,KAAK,CAACmC,KAAK,CAACiB;UAAkB,gBAAG,CAAC,gBAAG/D,OAAA,CAAAE,SAAA,mBAAI,CAAC;QAAA;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnF,CAAC,eACJ5D,OAAA;UAAG6D,KAAK,EAAE;YAAEC,YAAY,EAAE,CAAC;UAAG,CAAE;UAAAN,QAAA,gBAC5BxD,OAAA;YAAAwD,QAAA,EAAG;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,YAAG,EAAEjD,KAAK,CAACqD,KAAK,gBAAIhE,OAAA,CAAAE,SAAA;YAAAsD,QAAA,EAAG7C,KAAK,CAACqD,KAAK,CAACC,OAAO,CAAC,CAAC;UAAC,gBAAG,CAAC,gBAAGjE,OAAA,CAAAE,SAAA,mBAAI,CAAC;QAAA;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC;MAAA,eACN,CAAC;IAEX;EAGJ;EAEA,SAASM,gBAAgBA,CAAA,EAAG;IACxB,MAAMC,eAAe,GAAG;MAAE,GAAGxD;IAAM,CAAC;IACpC,MAAMyD,IAAI,GAAG;MACTrB,EAAE,EAAE;IACR,CAAC;IACD,MAAMsB,gBAAgB,GAAG;MACrBtB,EAAE,EAAE;IACR,CAAC;IACD,MAAMuB,WAAW,GAAG;MAChB3D,KAAK,EAAE;QAAE,GAAGwD;MAAgB,CAAC;MAC7BjC,OAAO,EAAErB,eAAe;MACxBuD,IAAI,EAAEA,IAAI;MACVC,gBAAgB,EAAEA;IACtB,CAAC;IACDxB,OAAO,CAAC0B,GAAG,CAACD,WAAW,CAAC;IACxB5E,iBAAiB,CAAC4E,WAAW,CAAC,CAAClC,IAAI,CAAEC,QAAQ,IAAK;MAC9C,IAAIA,QAAQ,CAACC,IAAI,EAAE;QACfkC,KAAK,CAAC,0CAA0C,CAAC;QACjDrD,OAAO,CAACgC,IAAI,CAAC1D,YAAY,CAAC;MAC9B;IACJ,CAAC,CAAC,CAACkD,KAAK,CAACC,KAAK,IAAI;MACd4B,KAAK,CAAC5B,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC;EAEN;EAEA,SAASmC,OAAOA,CAAA,EAAG;IACf,IAAI1D,gBAAgB,EAAE;MAClB,MAAMqD,IAAI,GAAG;QACTrB,EAAE,EAAE;MACR,CAAC;MACD,MAAMsB,gBAAgB,GAAG;QACrBtB,EAAE,EAAE;MACR,CAAC;MACD,MAAMuB,WAAW,GAAG;QAChB3D,KAAK,EAAE;UAAE,GAAGA;QAAM,CAAC;QACnBuB,OAAO,EAAGnB,gBAAiB;QAC3BqD,IAAI,EAAEA,IAAI;QACVC,gBAAgB,EAAEA;MACtB,CAAC;MACD3E,iBAAiB,CAAC4E,WAAW,CAAC,CAAClC,IAAI,CAAEC,QAAQ,IAAK;QAC9C,IAAIA,QAAQ,CAACC,IAAI,EAAE;UACfkC,KAAK,CAAC,0CAA0C,CAAC;UACjDrD,OAAO,CAACgC,IAAI,CAAC1D,YAAY,CAAC;QAC9B;MACJ,CAAC,CAAC,CAACkD,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAAC0B,GAAG,CAAC3B,KAAK,CAAC;MACtB,CAAC,CAAC;IAEN,CAAC,MAAM;MACH,MAAMI,MAAM,GAAG;QACXC,YAAY,EAAE,2BAA2B;QACzCC,iBAAiB,EAAE;MACvB,CAAC;MACD9C,SAAS,CAAC4C,MAAM,CAAC;MACjB7B,OAAO,CAACgC,IAAI,CAAC3D,MAAM,CAAC;IACxB;EACJ;EAEA,SAASkF,QAAQA,CAAA,EAAE;IACf,IAAGzD,eAAe,GAACN,KAAK,CAACqD,KAAK,EAAC;MAC3B,MAAMK,gBAAgB,GAAC;QACnBtB,EAAE,EAAC;MACP,CAAC;MACD,MAAM4B,eAAe,GAAC;QAClB5B,EAAE,EAAC;MACP,CAAC;MACD;MACA,MAAM6B,MAAM,GAAGpD,KAAK,CAACqD,IAAI,CAAErD,KAAK,IAAGA,KAAK,CAACkB,WAAW,KAAKtB,UAAU,CAAC,EAAG;MACa;;MAEpF,MAAMkD,WAAW,GAAG;QAChB3D,KAAK,EAAC;UAAC,GAAGA;QAAK,CAAC;QAChBuB,OAAO,EAAEjB,eAAe;QACxBmD,IAAI,EAACO,eAAe;QACpBN,gBAAgB,EAACA,gBAAgB;QACjCS,iBAAiB,EAACF;MACtB,CAAC;MACDlF,iBAAiB,CAAC4E,WAAW,CAAC,CAAClC,IAAI,CAAEC,QAAQ,IAAG;QAC5C,IAAGA,QAAQ,CAACC,IAAI,EAAE;UACdkC,KAAK,CAAC,0CAA0C,CAAC;QACrD;MACJ,CAAC,CAAC,CAAC7B,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAAC0B,GAAG,CAAC3B,KAAK,CAAC;MACtB,CAAC,CAAC;IAEN,CAAC,MAAI;MACD4B,KAAK,CAAC,kCAAkC,CAAC;IAC7C;EACJ;EAEA,SAASF,WAAWA,CAAA,EAAG;IACnB,QAAQhD,cAAc;MAElB,KAAKhB,QAAQ;QAAC;UACV,MAAM6D,eAAe,GAAG;YAAC,GAAGxD;UAAK,CAAC;UAClC,MAAMyD,IAAI,GAAC;YACPrB,EAAE,EAAC;UACP,CAAC;UACD,MAAMsB,gBAAgB,GAAC;YACnBtB,EAAE,EAAC;UACP,CAAC;UACD,MAAMuB,WAAW,GAAG;YAChB3D,KAAK,EAAC;cAAC,GAAGwD;YAAe,CAAC;YAC1BjC,OAAO,EAACA,OAAO;YACfkC,IAAI,EAACA,IAAI;YACTC,gBAAgB,EAACA;UACrB,CAAC;UACD,IAAGnC,OAAO,GAAC,IAAI,EAAC;YACZxC,iBAAiB,CAAC4E,WAAW,CAAC,CAAClC,IAAI,CAAGC,QAAQ,IAAG;cAC7C,IAAGA,QAAQ,CAACC,IAAI,EAAC;gBACbT,WAAW,CAAC,IAAI,CAAC;gBACjBI,gBAAgB,CAAC,CAACD,aAAa,CAAC;gBAChCG,UAAU,CAAC,EAAE,CAAC;gBACd,MAAM4C,aAAa,GAAGC,UAAU,CAAC9C,OAAO,CAAC;gBACzC,MAAM+C,iBAAiB,GAAGF,aAAa,CAACd,OAAO,CAAC,CAAC,CAAC;gBAClDlC,YAAY,CAAC,iCAAiC,GAACkD,iBAAiB,GAAC,wBAAwB,GAACtE,KAAK,CAAC+B,WAAW,CAAC;cAChH;YACJ,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;cACd,IAAGA,KAAK,CAACP,QAAQ,EAAC;gBACd,IAAIO,KAAK,CAACP,QAAQ,CAACC,IAAI,EAAE;kBACrBT,WAAW,CAAC,IAAI,CAAC;kBACjBE,YAAY,CAACa,KAAK,CAACP,QAAQ,CAACC,IAAI,CAAC;gBACrC;cACJ,CAAC,MACI;gBACLP,YAAY,CAAC,oBAAoB,CAAC;cAClC;YACJ,CAAC,CAAC;UACN,CAAC,MAAI;YACDA,YAAY,CAAC,qDAAqD,CAAC;YACnEE,gBAAgB,CAAC,CAACD,aAAa,CAAC;YAChCH,WAAW,CAAC,IAAI,CAAC;YACjBM,UAAU,CAAC,EAAE,CAAC;UAClB;UACA;QACJ;MACA,KAAK5B,QAAQ;QAAC;UACV;QACJ;MACA,KAAKC,QAAQ;QAAC;UACV;QACJ;MACA,KAAKC,QAAQ;QAAC;UACV;QACJ;MACA,KAAKC,UAAU;QAAC;UACZ;QACJ;IAGJ;EACJ;EAEA,SAASwE,WAAWA,CAACpD,SAAS,EAAE;IAE5B,IAAIF,QAAQ,EAAE;MACVuD,UAAU,CAAC,MAAM;QACbtD,WAAW,CAAC,KAAK,CAAC;QAClBE,YAAY,CAAC,EAAE,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;MACR,oBACI/B,OAAA;QAAK6D,KAAK,EAAE;UAAEuB,KAAK,EAAE;QAAQ,CAAE;QAACC,SAAS,EAAC,cAAc;QAAA7B,QAAA,EACnD1B;MAAS;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAEd,CAAC,MAAM;MACH;MACA,OAAO,IAAI;IACf;EACJ;EAIA,SAAS0B,UAAUA,CAAChE,cAAc,EAAE;IAGhC,QAAQA,cAAc;MAClB,KAAKhB,QAAQ;QACT,oBACIN,OAAA,CAAAE,SAAA;UAAAsD,QAAA,gBACAxD,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACF5D,OAAA;YAAO6D,KAAK,EAAE;cAAC0B,WAAW,EAAC;YAAE,CAAE;YAACC,GAAG,EAAC,SAAS;YAAAhC,QAAA,eAACxD,OAAA;cAAAwD,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClF5D,OAAA;YAAO6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGlD,CAAC,IAAKN,UAAU,CAACM,CAAC,CAACmD,MAAM,CAACC,KAAK,CAAE;YAACA,KAAK,EAAE3D,OAAQ;YAAC4D,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAmC;YAAAtC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChL5D,OAAA;YAAQ6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAM5B,WAAW,CAAC,CAAE;YAACwB,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA7B,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACnJsB,WAAW,CAACpD,SAAS,CAAC;QAAA,eACzB,CAAC;MAEX,KAAKvB,QAAQ;QACT,oBACIP,OAAA,CAAAE,SAAA;UAAAsD,QAAA,gBACIxD,OAAA;YAAO6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGlD,CAAC,IAAKzB,mBAAmB,CAACyB,CAAC,CAACmD,MAAM,CAACC,KAAK,CAAE;YAACC,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAkC;YAAAtC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxK5D,OAAA;YAAQ6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAMzB,OAAO,CAAC,CAAE;YAACqB,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA7B,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eACjJ,CAAC;MAEX,KAAKpD,QAAQ;QACT,oBACIR,OAAA,CAAAE,SAAA;UAAAsD,QAAA,gBACIxD,OAAA;YAAO6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGlD,CAAC,IAAKpB,aAAa,CAACoB,CAAC,CAACmD,MAAM,CAACC,KAAK,CAAE;YAACC,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC;UAAiC;YAAAtC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC/J5D,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN5D,OAAA;YAAAwD,QAAA,eAAGxD,OAAA;cAAAwD,QAAA,EAAG;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACpB5D,OAAA;YACI6D,KAAK,EAAE;cAAE6B,KAAK,EAAE,GAAG;cAAES,MAAM,EAAE,EAAE;cAAEV,SAAS,EAAE,EAAE;cAAEW,MAAM,EAAE;YAAE,CAAE;YAC5DT,QAAQ,EAAGlD,CAAC,IAAKpB,aAAa,CAACoB,CAAC,CAACmD,MAAM,CAACC,KAAK,CAAE;YAAArC,QAAA,gBAE/CxD,OAAA;cAAQ6F,KAAK,EAAC,EAAE;cAAArC,QAAA,EAAC;YAAwB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACjDpC,KAAK,CACDgB,MAAM,CAAEhB,KAAK,IAAKA,KAAK,CAACsB,KAAK,CAACC,EAAE,KAAK,CAAC,CAAC,CAAC;YAAA,CACxCsD,GAAG,CAAE7E,KAAK,iBACPxB,OAAA;cAAgC6F,KAAK,EAAErE,KAAK,CAACkB,WAAY;cAAAc,QAAA,GAAC,MAChD,EAAChC,KAAK,CAACkB,WAAW,EAAC,YAAc,EAAClB,KAAK,CAAC6B,MAAM,CAACiD,IAAI,EAAC,YAAc,EAAC9E,KAAK,CAAC6B,MAAM,CAACkD,OAAO;YAAA,GADpF/E,KAAK,CAACkB,WAAW;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEtB,CACX,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACT5D,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN5D,OAAA;YAAO6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAE;YAACC,QAAQ,EAAGlD,CAAC,IAAKvB,kBAAkB,CAACuB,CAAC,CAACmD,MAAM,CAACC,KAAK,CAAE;YAACC,IAAI,EAAC,QAAQ;YAACC,WAAW,EAAC;UAAkC;YAAAtC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACvK5D,OAAA;YAAQ6D,KAAK,EAAE;cAAE4B,SAAS,EAAE,EAAE;cAAEO,UAAU,EAAE,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEP,KAAK,EAAE;YAAI,CAAE;YAACQ,OAAO,EAAEA,CAAA,KAAMxB,QAAQ,CAAC,CAAE;YAACoB,IAAI,EAAC,QAAQ;YAACT,SAAS,EAAC,EAAE;YAAA7B,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eAC1J,CAAC;IAEf;EAEJ;EAKA,oBACI5D,OAAA,CAAAE,SAAA;IAAAsD,QAAA,eAIIxD,OAAA;MAAKqF,SAAS,EAAC,KAAK;MAAA7B,QAAA,eAEhBxD,OAAA;QAAKqF,SAAS,EAAC,eAAe;QAAA7B,QAAA,gBAC1BxD,OAAA;UAAAwD,QAAA,eAAIxD,OAAA;YAAAwD,QAAA,EAAG;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B5D,OAAA;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN5D,OAAA;UAAAwD,QAAA,eAAGxD,OAAA;YAAAwD,QAAA,EAAID,SAAS,CAAC5C,KAAK;UAAC;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAChC5D,OAAA;UAAAwD,QAAA,eAAGxD,OAAA;YAAAwD,QAAA,EAAG;UAAsB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACpC5D,OAAA;UACI6D,KAAK,EAAE;YAAE4B,SAAS,EAAE,EAAE;YAAEW,MAAM,EAAE;UAAE,CAAE;UACpCT,QAAQ,EAAGlD,CAAC,IAAKlB,iBAAiB,CAACkB,CAAC,CAACmD,MAAM,CAACC,KAAK,CAAE;UAAArC,QAAA,gBAEnDxD,OAAA;YAAQ6F,KAAK,EAAC,EAAE;YAAArC,QAAA,EAAE;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACjDlC,eAAe,gBACZ1B,OAAA,CAAAE,SAAA;YAAAsD,QAAA,EACK9B,eAAe,CAAC2E,GAAG,CAAEG,CAAC,iBACnBxG,OAAA;cAAmB6F,KAAK,EAAEW,CAAC,CAACzD,EAAG;cAAAS,QAAA,EAC1BgD,CAAC,CAAC7B;YAAe,GADT6B,CAAC,CAACzD,EAAE;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAET,CACX;UAAC,gBACJ,CAAC,gBAEH5D,OAAA,CAAAE,SAAA,mBACE,CACL;QAAA;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,EAER0B,UAAU,CAAChE,cAAc,CAAC;MAAA;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBAQR,CAAC;AAEX;AAACvD,EAAA,CAjXuBF,gBAAgB;EAAA,QAQtBd,WAAW,EAITM,UAAU;AAAA;AAAA8G,EAAA,GAZNtG,gBAAgB;AAAA,IAAAsG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}