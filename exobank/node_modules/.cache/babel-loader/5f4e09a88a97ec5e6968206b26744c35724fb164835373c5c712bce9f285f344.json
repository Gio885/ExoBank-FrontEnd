{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sviluppo\\\\react\\\\exobank\\\\src\\\\components\\\\OperazioniUtente.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Deposito from \"./Deposito\";\nimport Prelievo from \"./Prelievo\";\nimport { ERRORE, INDEX_UTENTE } from \"../utility/Route\";\nimport { findContoUtente, insertTransazione } from \"../service/utenteService\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { listaConti, listaTipoTransazione } from \"../service/adminService\";\nimport { setConto } from \"../store/slice/contoSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function OperazioniUtente({\n  setErrore\n}) {\n  _s();\n  const DEPOSITO = \"1\";\n  const PRELIEVO = \"2\";\n  const BONIFICO = \"3\";\n  const RICARICA = \"4\";\n  const BOLLETTINO = \"5\";\n  const conto = useSelector(state => state.conto);\n  const utente = useSelector(state => state.utente);\n  const dispatch = useDispatch();\n  const [importoDeposito, setImportoDeposito] = useState();\n  const [importoPrelevare, setImportoPrelevare] = useState();\n  const history = useHistory();\n  const [contoBenef, setContoBenef] = useState();\n  const [tipoOperazione, setTipoOperazione] = useState();\n  const [conti, setConti] = useState();\n  const [listaOperazioni, setListaOperazioni] = useState();\n  const [visibile, setVisibile] = useState(false);\n  const [messaggio, setMessaggio] = useState(\"\");\n  const [aggiornamento, setAggiornamento] = useState(false);\n  const [importo, setImporto] = useState();\n  const [ibanBeneficiario, setIbanBeneficiario] = useState();\n  useEffect(() => {\n    listaConti().then(response => {\n      if (response.data.success) {\n        setConti(response.data.data.filter(e => e.numeroConto != conto.numeroConto));\n      }\n    }).catch(error => {\n      console.error(\"Qualcosa è andato storto\", error);\n    });\n    listaTipoTransazione().then(response => {\n      if (response.data) {\n        setListaOperazioni(response.data);\n      }\n    }).catch(error => {\n      console.error(\"Qualcosa è andato storto\", error);\n    });\n    if (conto.stato) {\n      if (conto.stato.id == 2 || conto.stato.id == 3) {\n        const errore = {\n          titoloErrore: \"CONTO CHIUSO O DISABILITATO\",\n          descrizioneErrore: \"Siamo spiacenti ma non puoi effetturare operazioni su questo conto\"\n        };\n        setErrore(errore);\n        history.push(ERRORE);\n      }\n    }\n    findContoUtente(utente).then(response => {\n      if (response.data.success) {\n        dispatch(setConto(response.data.data));\n      } else {\n        dispatch(setConto(\"\"));\n      }\n    }).catch(error => {\n      if (error.response.data) {\n        setVisibile(true);\n        setMessaggio(error.response.data);\n      } else {\n        setVisibile(true);\n        setMessaggio(\"Errore sconosciuto\");\n      }\n    });\n  }, [aggiornamento]);\n  function datiConto(conto) {\n    if (!conto) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Non hai un conto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Numero conto:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), \" \", conto.numeroConto]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Stato conto:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), \" \", conto.stato ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: conto.stato.statoContoCorrente\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: -10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Saldo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), \" \\u20AC \", conto.saldo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: conto.saldo.toFixed(2)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n  }\n  function effettuaDeposito() {\n    const contoAggiornato = {\n      ...conto\n    };\n    const tipo = {\n      id: 1\n    };\n    const statoTransazione = {\n      id: 1\n    };\n    const transazione = {\n      conto: {\n        ...contoAggiornato\n      },\n      importo: importoDeposito,\n      tipo: tipo,\n      statoTransazione: statoTransazione\n    };\n    console.log(transazione);\n    insertTransazione(transazione).then(response => {\n      if (response.data) {\n        alert(\"la tua richiesta è stata presa in carico\");\n        history.push(INDEX_UTENTE);\n      }\n    }).catch(error => {\n      alert(error.response.data);\n    });\n  }\n  function preleva() {\n    if (importoPrelevare) {\n      const tipo = {\n        id: 2\n      };\n      const statoTransazione = {\n        id: 3\n      };\n      const transazione = {\n        conto: {\n          ...conto\n        },\n        importo: importoPrelevare,\n        tipo: tipo,\n        statoTransazione: statoTransazione\n      };\n      insertTransazione(transazione).then(response => {\n        if (response.data) {\n          alert(\"la tua richiesta è stata presa in carico\");\n          history.push(INDEX_UTENTE);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      const errore = {\n        titoloErrore: \"OPERAZIONE NON CONSENTITA\",\n        descrizioneErrore: \"L'importo da prelevare supera il credito disponibile\"\n      };\n      setErrore(errore);\n      history.push(ERRORE);\n    }\n  }\n  function bonifico() {\n    if (importo < conto.saldo) {\n      const statoTransazione = {\n        id: 3\n      };\n      const tipoTransazione = {\n        id: 3\n      };\n      //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\n      const contoB = conti.find(conti => conti.numeroConto === contoBenef); //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\n      // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\n\n      const transazione = {\n        conto: {\n          ...conto\n        },\n        importo: importo,\n        tipo: tipoTransazione,\n        statoTransazione: statoTransazione,\n        contoBeneficiario: contoB\n      };\n      insertTransazione(transazione).then(response => {\n        if (response.data) {\n          alert(\"la tua richiesta è stata presa in carico\");\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      alert(\"importo superiore al saldo conto\");\n    }\n  }\n  function transazione() {\n    switch (tipoOperazione) {\n      case DEPOSITO:\n        {\n          const contoAggiornato = {\n            ...conto\n          };\n          const tipo = {\n            id: 1\n          };\n          const statoTransazione = {\n            id: 1\n          };\n          const transazione = {\n            conto: {\n              ...contoAggiornato\n            },\n            importo: importo,\n            tipo: tipo,\n            statoTransazione: statoTransazione\n          };\n          if (importo < 1000) {\n            insertTransazione(transazione).then(response => {\n              if (response.data) {\n                setVisibile(true);\n                setAggiornamento(!aggiornamento);\n                setImporto(\"\");\n                const importoNumero = parseFloat(importo);\n                const importoFormattato = importoNumero.toFixed(2);\n                setMessaggio(\"Hai depositato un importo di € \" + importoFormattato + \" sul tuo conto numero \" + conto.numeroConto);\n              }\n            }).catch(error => {\n              if (error.response) {\n                if (error.response.data) {\n                  setVisibile(true);\n                  setMessaggio(error.response.data);\n                }\n              } else {\n                setMessaggio(\"Errore sconosciuto\");\n              }\n            });\n          } else {\n            setMessaggio(\"Non è possibile effettuare depositi sopra € 1000.00\");\n            setAggiornamento(!aggiornamento);\n            setVisibile(true);\n            setImporto(\"\");\n          }\n          break;\n        }\n      case PRELIEVO:\n        {\n          if (importo < 1000) {\n            if (importo > 0) {\n              if (importo < conto.saldo) {\n                const tipo = {\n                  id: 2\n                };\n                const statoTransazione = {\n                  id: 3\n                };\n                const transazione = {\n                  conto: {\n                    ...conto\n                  },\n                  importo: importo,\n                  tipo: tipo,\n                  statoTransazione: statoTransazione\n                };\n                insertTransazione(transazione).then(response => {\n                  if (response.data) {\n                    setVisibile(true);\n                    setImporto(\"\");\n                    setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\");\n                  }\n                }).catch(error => {\n                  if (error.response.data) {\n                    setVisibile(true);\n                    setMessaggio(error.response.data);\n                  } else {\n                    setMessaggio(\"Errore sconosciuto\");\n                  }\n                });\n              } else {\n                setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\n                setVisibile(true);\n                setImporto(\"\");\n              }\n            } else {\n              setMessaggio(\"Inserisci un importo positivo\");\n              setVisibile(true);\n              setImporto(\"\");\n            }\n          } else {\n            setMessaggio(\"Non è possibile richiedere un prelievo superiore a € 1000.00\");\n            setVisibile(true);\n            setImporto(\"\");\n          }\n          break;\n        }\n      case BONIFICO:\n        {\n          if (importo > 0) {\n            if (importo < 1000) {\n              if (importo < conto.saldo) {\n                if (ibanBeneficiario) {\n                  if (ibanBeneficiario.length == 27) {\n                    const statoTransazione = {\n                      id: 3\n                    };\n                    const tipoTransazione = {\n                      id: 3\n                    };\n                    //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\n                    const contoBeneficiario = conti.find(conti => conti.numeroConto === ibanBeneficiario); //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\n                    // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\n\n                    const transazione = {\n                      conto: {\n                        ...conto\n                      },\n                      importo: importo,\n                      tipo: tipoTransazione,\n                      statoTransazione: statoTransazione,\n                      contoBeneficiario: contoBeneficiario\n                    };\n                    insertTransazione(transazione).then(response => {\n                      alert(\"ok fatta\");\n                      if (response.data) {\n                        alert(\"ok response\");\n                        const impor = parseFloat(importo);\n                        setMessaggio(\"La tua richiesta di bonifico di € \" + impor.toFixed(2) + \" è stata presa in carico\");\n                        setVisibile(true);\n                        setIbanBeneficiario(\"\");\n                        setImporto(\"\");\n                      }\n                    }).catch(error => {\n                      alert(\"ok catch\");\n                      if (error.response.data) {\n                        setVisibile(true);\n                        setMessaggio(error.response.data);\n                        setIbanBeneficiario(\"\");\n                        setImporto(\"\");\n                      } else {\n                        setMessaggio(\"Errore sconosciuto\");\n                        setIbanBeneficiario(\"\");\n                        setImporto(\"\");\n                      }\n                    }).catch(error => {\n                      console.log(error);\n                    });\n                  } else {\n                    setMessaggio(\"L'iban inserito non è valido\");\n                    setVisibile(true);\n                    setIbanBeneficiario(\"\");\n                    setImporto(\"\");\n                  }\n                } else {\n                  setMessaggio(\"Operazione non consentita, inserisci l'iban\");\n                  setVisibile(true);\n                  setIbanBeneficiario(\"\");\n                  setImporto(\"\");\n                }\n              } else {\n                setMessaggio(\"L'importo inserito è superiore al saldo\");\n                setVisibile(true);\n                setIbanBeneficiario(\"\");\n                setImporto(\"\");\n              }\n            } else {\n              setMessaggio(\"Operazione non consentita, l'importo è superiore ad € 1000.00\");\n              setVisibile(true);\n              setIbanBeneficiario(\"\");\n              setImporto(\"\");\n            }\n          } else {\n            setMessaggio(\"Operazione non consentita, inserisci un importo positivo\");\n            setVisibile(true);\n            setIbanBeneficiario(\"\");\n            setImporto(\"\");\n          }\n          break;\n        }\n      case RICARICA:\n        {\n          break;\n        }\n      case BOLLETTINO:\n        {\n          break;\n        }\n    }\n  }\n  function errorBanner(messaggio) {\n    if (visibile) {\n      setTimeout(() => {\n        setVisibile(false);\n        setMessaggio(\"\");\n      }, 5000);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"black\"\n        },\n        className: \"error-banner\",\n        children: messaggio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Altrimenti, non renderizzare nulla\n      return null;\n    }\n  }\n  function operazione(tipoOperazione) {\n    switch (tipoOperazione) {\n      case DEPOSITO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo da depositare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"DEPOSITA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case PRELIEVO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 10\n            },\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo da prelevare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 10,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"PRELEVA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n      case BONIFICO:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"iban\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"DIGITA IBAN BENEFICIARIO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginTop: 10,\n              width: 440\n            },\n            onChange: e => setIbanBeneficiario(e.target.value),\n            value: ibanBeneficiario,\n            type: \"text\",\n            placeholder: \"Inserisci IBAN del beneficiario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Oppure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"iban\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"SELEZIONA IBAN BENEFICIARIO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              width: 440,\n              height: 40,\n              marginTop: 10,\n              margin: 5\n            },\n            onChange: e => setIbanBeneficiario(e.target.value),\n            value: ibanBeneficiario,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \" \\xA0Seleziona un IBAN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 29\n            }, this), conti ? conti.filter(conti => conti.stato.id === 1).map(conti => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: conti.numeroConto,\n              children: [\"\\xA0\", conti.numeroConto, \" \\xA0\\xA0 \", conti.utente.nome, \" \\xA0\\xA0 \", conti.utente.cognome]\n            }, conti.numeroConto, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 41\n            }, this)) : null // Aggiungi null se iban non è definito al momento\n            ]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"importo\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"INSERISCI L'IMPORTO: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              marginLeft: 10,\n              marginTop: 0,\n              width: 255\n            },\n            onChange: e => setImporto(e.target.value),\n            value: importo,\n            type: \"number\",\n            placeholder: \"Inserisci l'importo del bonifico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: 20,\n              marginLeft: 0,\n              padding: 4,\n              width: 160\n            },\n            onClick: () => transazione(),\n            type: \"button\",\n            className: \"\",\n            children: \"FAI UN BONIFICO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 25\n          }, this), errorBanner(messaggio)]\n        }, void 0, true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"div-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"DATI CONTO:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: datiConto(conto)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Effettua un operazione\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          style: {\n            marginTop: 10,\n            margin: 5\n          },\n          onChange: e => setTipoOperazione(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Seleziona un operazione\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 25\n          }, this), listaOperazioni ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: listaOperazioni.map(o => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: o.id,\n              children: o.tipoTransazione\n            }, o.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 37\n            }, this))\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this), operazione(tipoOperazione)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(OperazioniUtente, \"j9fCl44ZbENn4j0wGJEa0sI1SHA=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory];\n});\n_c = OperazioniUtente;\nvar _c;\n$RefreshReg$(_c, \"OperazioniUtente\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","Deposito","Prelievo","ERRORE","INDEX_UTENTE","findContoUtente","insertTransazione","useHistory","listaConti","listaTipoTransazione","setConto","jsxDEV","_jsxDEV","Fragment","_Fragment","OperazioniUtente","setErrore","_s","DEPOSITO","PRELIEVO","BONIFICO","RICARICA","BOLLETTINO","conto","state","utente","dispatch","importoDeposito","setImportoDeposito","importoPrelevare","setImportoPrelevare","history","contoBenef","setContoBenef","tipoOperazione","setTipoOperazione","conti","setConti","listaOperazioni","setListaOperazioni","visibile","setVisibile","messaggio","setMessaggio","aggiornamento","setAggiornamento","importo","setImporto","ibanBeneficiario","setIbanBeneficiario","then","response","data","success","filter","e","numeroConto","catch","error","console","stato","id","errore","titoloErrore","descrizioneErrore","push","datiConto","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","statoContoCorrente","saldo","toFixed","effettuaDeposito","contoAggiornato","tipo","statoTransazione","transazione","log","alert","preleva","bonifico","tipoTransazione","contoB","find","contoBeneficiario","importoNumero","parseFloat","importoFormattato","length","impor","errorBanner","setTimeout","color","className","operazione","marginRight","for","marginTop","width","onChange","target","value","type","placeholder","marginLeft","padding","onClick","height","margin","map","nome","cognome","o","_c","$RefreshReg$"],"sources":["C:/Sviluppo/react/exobank/src/components/OperazioniUtente.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Deposito from \"./Deposito\";\r\nimport Prelievo from \"./Prelievo\";\r\nimport { ERRORE, INDEX_UTENTE } from \"../utility/Route\";\r\nimport { findContoUtente, insertTransazione } from \"../service/utenteService\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { listaConti, listaTipoTransazione } from \"../service/adminService\";\r\nimport { setConto } from \"../store/slice/contoSlice\";\r\n\r\n\r\n\r\nexport default function OperazioniUtente({ setErrore }) {\r\n\r\n\r\n    const DEPOSITO = \"1\"\r\n    const PRELIEVO = \"2\"\r\n    const BONIFICO = \"3\" \r\n    const RICARICA = \"4\"\r\n    const BOLLETTINO = \"5\"\r\n    const conto = useSelector(state => state.conto);\r\n    const utente = useSelector(state => state.utente);\r\n    const dispatch = useDispatch();\r\n    const [importoDeposito, setImportoDeposito] = useState();\r\n    const [importoPrelevare, setImportoPrelevare] = useState();\r\n    const history = useHistory();\r\n    const [contoBenef, setContoBenef] = useState();\r\n    const [tipoOperazione, setTipoOperazione] = useState();\r\n    const [conti, setConti] = useState();\r\n    const [listaOperazioni,setListaOperazioni] = useState();\r\n    const [visibile,setVisibile] = useState(false)\r\n    const [messaggio,setMessaggio]= useState(\"\")\r\n    const [aggiornamento,setAggiornamento] = useState(false)\r\n    const [importo,setImporto] = useState();\r\n    const [ibanBeneficiario, setIbanBeneficiario] = useState();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        listaConti().then((response) => {\r\n            if (response.data.success) {\r\n                setConti(response.data.data.filter((e) =>e.numeroConto != conto.numeroConto))\r\n            }\r\n        }).catch(error => {\r\n            console.error(\"Qualcosa è andato storto\",error)\r\n           })\r\n\r\n        listaTipoTransazione().then((response)=>{\r\n        if(response.data){\r\n            setListaOperazioni(response.data)\r\n        }\r\n        }).catch(error => {\r\n           console.error(\"Qualcosa è andato storto\",error)\r\n          })\r\n\r\n\r\n\r\n\r\n        if (conto.stato) {\r\n            if (conto.stato.id == 2 || conto.stato.id == 3) {\r\n                const errore = {\r\n                    titoloErrore: \"CONTO CHIUSO O DISABILITATO\",\r\n                    descrizioneErrore: \"Siamo spiacenti ma non puoi effetturare operazioni su questo conto\"\r\n\r\n                }\r\n                setErrore(errore);\r\n                history.push(ERRORE)\r\n            }\r\n        }\r\n\r\n        \r\n        findContoUtente(utente).then((response) => {\r\n            if (response.data.success) {\r\n                dispatch(setConto(response.data.data))\r\n            }else{\r\n                dispatch(setConto(\"\"))\r\n            }\r\n        }).catch(error => {\r\n            if (error.response.data) {\r\n              setVisibile(true)\r\n              setMessaggio(error.response.data)\r\n            } else {\r\n              setVisibile(true)\r\n              setMessaggio(\"Errore sconosciuto\");\r\n            }\r\n          })\r\n\r\n    }, [aggiornamento])\r\n\r\n\r\n    function datiConto(conto) {\r\n        if (!conto) {\r\n            return <p>Non hai un conto</p>;\r\n        } else {\r\n            return (\r\n                <>\r\n                    <p style={{ marginBottom: 0 }}>\r\n                        <b>Numero conto:</b> {conto.numeroConto}\r\n                    </p>\r\n                    <p style={{ marginBottom: 0 }}>\r\n                        <b>Stato conto:</b> {(conto.stato) ? <>{conto.stato.statoContoCorrente}</> : <></>}\r\n                    </p>\r\n                    <p style={{ marginBottom: -10 }}>\r\n                        <b>Saldo:</b> € {(conto.saldo) ? <>{conto.saldo.toFixed(2)}</> : <></>}\r\n                    </p>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function effettuaDeposito() {\r\n        const contoAggiornato = { ...conto }\r\n        const tipo = {\r\n            id: 1\r\n        }\r\n        const statoTransazione = {\r\n            id: 1\r\n        }\r\n        const transazione = {\r\n            conto: { ...contoAggiornato },\r\n            importo: importoDeposito,\r\n            tipo: tipo,\r\n            statoTransazione: statoTransazione,\r\n        }\r\n        console.log(transazione)\r\n        insertTransazione(transazione).then((response) => {\r\n            if (response.data) {\r\n                alert(\"la tua richiesta è stata presa in carico\")\r\n                history.push(INDEX_UTENTE)\r\n            }\r\n        }).catch(error => {\r\n            alert(error.response.data)\r\n        })\r\n\r\n    }\r\n\r\n    function preleva() {\r\n        if (importoPrelevare) {\r\n            const tipo = {\r\n                id: 2\r\n            }\r\n            const statoTransazione = {\r\n                id: 3\r\n            }\r\n            const transazione = {\r\n                conto: { ...conto },\r\n                importo: (importoPrelevare),\r\n                tipo: tipo,\r\n                statoTransazione: statoTransazione\r\n            }\r\n            insertTransazione(transazione).then((response) => {\r\n                if (response.data) {\r\n                    alert(\"la tua richiesta è stata presa in carico\")\r\n                    history.push(INDEX_UTENTE)\r\n                }\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        } else {\r\n            const errore = {\r\n                titoloErrore: \"OPERAZIONE NON CONSENTITA\",\r\n                descrizioneErrore: \"L'importo da prelevare supera il credito disponibile\"\r\n            }\r\n            setErrore(errore)\r\n            history.push(ERRORE)\r\n        }\r\n    }\r\n\r\n    function bonifico(){\r\n        if(importo<conto.saldo){\r\n            const statoTransazione={\r\n                id:3\r\n            }\r\n            const tipoTransazione={\r\n                id:3\r\n            }\r\n            //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\r\n            const contoB = conti.find((conti)=>conti.numeroConto === contoBenef)   //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\r\n                                                                                                // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\r\n\r\n            const transazione = {\r\n                conto:{...conto},\r\n                importo: importo,\r\n                tipo:tipoTransazione,\r\n                statoTransazione:statoTransazione,\r\n                contoBeneficiario:contoB,\r\n            }\r\n            insertTransazione(transazione).then((response)=>{\r\n                if(response.data) {\r\n                    alert(\"la tua richiesta è stata presa in carico\")\r\n                }\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        }else{\r\n            alert(\"importo superiore al saldo conto\")\r\n        }\r\n    }\r\n\r\n    function transazione (){\r\n        switch (tipoOperazione){\r\n\r\n            case DEPOSITO:{\r\n                const contoAggiornato = {...conto}\r\n                const tipo={\r\n                    id:1\r\n                }\r\n                const statoTransazione={\r\n                    id:1\r\n                }    \r\n                const transazione = {\r\n                    conto:{...contoAggiornato},\r\n                    importo:importo,\r\n                    tipo:tipo,\r\n                    statoTransazione:statoTransazione,\r\n                }\r\n                if(importo<1000){\r\n                    insertTransazione(transazione).then ((response)=>{\r\n                        if(response.data){\r\n                            setVisibile(true)\r\n                            setAggiornamento(!aggiornamento)\r\n                            setImporto(\"\")\r\n                            const importoNumero = parseFloat(importo)\r\n                            const importoFormattato = importoNumero.toFixed(2);\r\n                            setMessaggio(\"Hai depositato un importo di € \"+importoFormattato+\" sul tuo conto numero \"+conto.numeroConto)\r\n                        }\r\n                    }).catch(error => {\r\n                        if(error.response){\r\n                            if (error.response.data) {\r\n                                setVisibile(true)\r\n                                setMessaggio(error.response.data)\r\n                            }\r\n                        }\r\n                        else {\r\n                        setMessaggio(\"Errore sconosciuto\");\r\n                        }\r\n                    }) \r\n                }else{\r\n                    setMessaggio(\"Non è possibile effettuare depositi sopra € 1000.00\")\r\n                    setAggiornamento(!aggiornamento)\r\n                    setVisibile(true)\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case PRELIEVO:{\r\n                if(importo<1000){\r\n                    if(importo>0){\r\n                        if(importo<conto.saldo){\r\n                            const tipo={\r\n                                id:2\r\n                            }\r\n                            const statoTransazione={\r\n                                id:3\r\n                            }       \r\n                            const transazione={\r\n                                conto:{...conto},\r\n                                importo:(importo),\r\n                                tipo:tipo,\r\n                                statoTransazione:statoTransazione,\r\n                            }\r\n                            insertTransazione(transazione).then((response)=>{\r\n                                if(response.data){\r\n                                    setVisibile(true)\r\n                                    setImporto(\"\")\r\n                                    setMessaggio(\"La tua richiesta di prelievo è stata presa in carico\")\r\n                                    }\r\n                                }).catch(error => {\r\n                                    if (error.response.data) {\r\n                                      setVisibile(true)\r\n                                      setMessaggio(error.response.data)\r\n                                    } else {\r\n                                      setMessaggio(\"Errore sconosciuto\");\r\n                                    }\r\n                                  })\r\n                        }else{\r\n                            setMessaggio(\"Operazione non consentita, importo superiore al saldo\")\r\n                            setVisibile(true)\r\n                            setImporto(\"\") \r\n                        }      \r\n                    }else{\r\n                        setMessaggio(\"Inserisci un importo positivo\")\r\n                        setVisibile(true)\r\n                        setImporto(\"\")\r\n                    }        \r\n                }else{\r\n                    setMessaggio(\"Non è possibile richiedere un prelievo superiore a € 1000.00\")\r\n                    setVisibile(true)\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case BONIFICO:{\r\n                if(importo>0){\r\n                    if (importo <1000) {\r\n                        if(importo< conto.saldo){\r\n                            if(ibanBeneficiario){\r\n                                if(ibanBeneficiario.length ==27){\r\n                                    const statoTransazione = {\r\n                                        id: 3\r\n                                    }\r\n                                    const tipoTransazione = {\r\n                                        id: 3\r\n                                    }\r\n                                    //QUI MI PRENDO IL CONTO RICICLANDOMI LA LISTA, PASSO IL CONTO ALLA TRANSAZIONE E FACCIO LA CHIAMATA PER INSERT TRANSAZIONE\r\n                                    const contoBeneficiario = conti.find((conti) => conti.numeroConto === ibanBeneficiario)   //CON IL FIND PRENDI UN OGGETTO DELLA LISTA DOVE LA CONDIZIONE SI VERIFICA\r\n                                    // CON IL FILTER PRENDI UNA LISTA DI OGGETTI DOVE LA CONDIZIONE SI VERIFICA\r\n                        \r\n                                    const transazione = {\r\n                                        conto: { ...conto },\r\n                                        importo: importo,\r\n                                        tipo: tipoTransazione,\r\n                                        statoTransazione: statoTransazione,\r\n                                        contoBeneficiario: contoBeneficiario,\r\n                                    }\r\n                                    insertTransazione(transazione).then((response) => {\r\n                                        alert(\"ok fatta\")\r\n                                        if (response.data) {\r\n                                            alert(\"ok response\")\r\n                                            const impor = parseFloat(importo)\r\n                                            setMessaggio(\"La tua richiesta di bonifico di € \"+impor.toFixed(2)+\" è stata presa in carico\");\r\n                                            setVisibile(true)\r\n                                            setIbanBeneficiario(\"\")\r\n                                            setImporto(\"\")\r\n                                        }\r\n                                    }).catch(error => {\r\n                                        alert(\"ok catch\")\r\n                                        if (error.response.data) {\r\n                                          setVisibile(true)\r\n                                          setMessaggio(error.response.data)\r\n                                          setIbanBeneficiario(\"\")\r\n                                          setImporto(\"\")\r\n                                        } else {\r\n                                          setMessaggio(\"Errore sconosciuto\");\r\n                                          setIbanBeneficiario(\"\")\r\n                                          setImporto(\"\")\r\n                                        }\r\n                                      }).catch(error => {\r\n                                        console.log(error)\r\n                                    })\r\n                                }else{\r\n                                setMessaggio(\"L'iban inserito non è valido\");\r\n                                setVisibile(true)\r\n                                setIbanBeneficiario(\"\")\r\n                                setImporto(\"\")\r\n                                }\r\n                            }else{\r\n                            setMessaggio(\"Operazione non consentita, inserisci l'iban\");\r\n                            setVisibile(true)\r\n                            setIbanBeneficiario(\"\")\r\n                            setImporto(\"\")\r\n                            }\r\n                            \r\n                        }else{\r\n                        setMessaggio(\"L'importo inserito è superiore al saldo\");\r\n                        setVisibile(true)\r\n                        setIbanBeneficiario(\"\")\r\n                        setImporto(\"\")\r\n                    } \r\n                    }else{     \r\n                        setMessaggio(\"Operazione non consentita, l'importo è superiore ad € 1000.00\");\r\n                        setVisibile(true)\r\n                        setIbanBeneficiario(\"\")\r\n                        setImporto(\"\")\r\n                    } \r\n                }else{\r\n                    setMessaggio(\"Operazione non consentita, inserisci un importo positivo\");\r\n                    setVisibile(true)\r\n                    setIbanBeneficiario(\"\")\r\n                    setImporto(\"\")\r\n                }\r\n                break;\r\n            }\r\n            case RICARICA:{\r\n                break;\r\n            }\r\n            case BOLLETTINO:{\r\n                break;\r\n            }\r\n           \r\n\r\n        }\r\n    }\r\n\r\n    function errorBanner(messaggio) {\r\n\r\n        if (visibile) {\r\n            setTimeout(() => {\r\n                setVisibile(false);\r\n                setMessaggio(\"\");\r\n            }, 5000);\r\n            return (\r\n                <div style={{ color: \"black\" }} className=\"error-banner\">\r\n                    {messaggio}\r\n                </div>\r\n            );\r\n        } else {\r\n            // Altrimenti, non renderizzare nulla\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function operazione(tipoOperazione) {\r\n\r\n\r\n        switch (tipoOperazione) {\r\n            case DEPOSITO:\r\n                return (\r\n                    <>\r\n                    <br />\r\n                        <label style={{marginRight:10}} for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo da depositare\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">DEPOSITA</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n            case PRELIEVO:\r\n                return (\r\n                    <>\r\n                        <br />\r\n                        <label style={{marginRight:10}} for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo da prelevare\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 10, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">PRELEVA</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n            case BONIFICO:\r\n                return (\r\n                    <>\r\n                    <br />\r\n                    <br />\r\n                         <label for=\"iban\"><b>DIGITA IBAN BENEFICIARIO: </b></label>\r\n                        <input style={{ marginTop: 10, width: 440 }} onChange={(e) => setIbanBeneficiario(e.target.value)} value={ibanBeneficiario} type=\"text\" placeholder=\"Inserisci IBAN del beneficiario\"></input>\r\n                        <br />\r\n                        <p><b>Oppure</b></p>\r\n                        <label for=\"iban\"><b>SELEZIONA IBAN BENEFICIARIO: </b></label>\r\n                        <select\r\n                            style={{ width: 440, height: 40, marginTop: 10, margin: 5 }}\r\n                            onChange={(e) => setIbanBeneficiario(e.target.value)} value={ibanBeneficiario}\r\n                        >\r\n                            <option value=\"\"> &nbsp;Seleziona un IBAN</option>\r\n                            {conti\r\n                                ? conti\r\n                                    .filter((conti) => conti.stato.id === 1)\r\n                                    .map((conti) => (\r\n                                        <option key={conti.numeroConto} value={conti.numeroConto}>\r\n                                            &nbsp;{conti.numeroConto} &nbsp;&nbsp; {conti.utente.nome} &nbsp;&nbsp; {conti.utente.cognome}\r\n                                        </option>\r\n                                    ))\r\n                                : null // Aggiungi null se iban non è definito al momento\r\n                            }\r\n                        </select>\r\n                        <br />\r\n                        <br />\r\n\r\n                        <label for=\"importo\"><b>INSERISCI L'IMPORTO: </b></label>\r\n                        <input style={{marginLeft:10, marginTop: 0, width: 255 }} onChange={(e) => setImporto(e.target.value)} value={importo} type=\"number\" placeholder=\"Inserisci l'importo del bonifico\"></input>\r\n                        <button style={{ marginTop: 20, marginLeft: 0, padding: 4, width: 160 }} onClick={() => transazione()} type=\"button\" className=\"\">FAI UN BONIFICO</button>\r\n                        {errorBanner(messaggio)}\r\n                    </>\r\n                )\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <div className=\"div\">\r\n\r\n                <div className=\"div-container\">\r\n                    <h3><b>DATI CONTO:</b></h3>\r\n                    <br />\r\n                    <p><b>{datiConto(conto)}</b></p>\r\n                    <p><b>Effettua un operazione</b></p>\r\n                    <select\r\n                        style={{ marginTop: 10, margin: 5 }}\r\n                        onChange={(e) => setTipoOperazione(e.target.value)}\r\n                    >\r\n                        <option value=\"\" >Seleziona un operazione</option>\r\n                        {listaOperazioni ? (\r\n                            <>\r\n                                {listaOperazioni.map((o) => (\r\n                                    <option key={o.id} value={o.id}>\r\n                                        {o.tipoTransazione}\r\n                                    </option>\r\n                                ))}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                            </>\r\n                        )}\r\n                    </select>\r\n\r\n                    {operazione(tipoOperazione)}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}