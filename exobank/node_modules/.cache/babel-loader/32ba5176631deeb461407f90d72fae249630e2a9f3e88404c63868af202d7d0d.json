{"ast":null,"code":"import { insertTransazione } from \"../service/utenteService\";\nexport function Operazione(tipoOperazione, conto, importo, ibanBeneficiario, setMessaggio, setVisibile, setVisibile2, setIbanBeneficiario) {\n  const contoAggiornato = {\n    ...conto\n  };\n  const tipoDeposito = {\n    id: 1\n  };\n  const tipoPrelievo = {\n    id: 2\n  };\n  const tipoBonifico = {\n    id: 3\n  };\n  const tipoRicarica = {\n    id: 4\n  };\n  const tipoBollettino = {\n    id: 5\n  };\n  let tipo;\n  let statoTransazione;\n  let contoBeneficiario = null;\n  let contoBeneficiarioEsterno = null;\n  switch (tipoOperazione) {\n    case DEPOSITO:\n      tipo = tipoDeposito;\n      statoTransazione = {\n        id: 1\n      };\n      break;\n    case PRELIEVO:\n      tipo = tipoPrelievo;\n      statoTransazione = {\n        id: 3\n      };\n      break;\n    case BONIFICO:\n      tipo = tipoBonifico;\n      statoTransazione = {\n        id: 3\n      };\n      contoBeneficiario = conti.find(conti => conti.numeroConto === ibanBeneficiario);\n      break;\n    case RICARICA:\n      tipo = tipoRicarica;\n      statoTransazione = {\n        id: 3\n      };\n      break;\n    case BOLLETTINO:\n      tipo = tipoBollettino;\n      statoTransazione = {\n        id: 3\n      };\n      contoBeneficiarioEsterno = ibanBeneficiario;\n      break;\n    default:\n      setMessaggio(\"Tipo di operazione non valido\");\n      setVisibile(true);\n      return;\n  }\n  if (importo <= 0) {\n    setMessaggio(\"Inserisci un importo positivo\");\n  } else if (importo >= 1000) {\n    setMessaggio(\"Non è possibile effettuare un'operazione superiore a € 1000.00\");\n  } else if (tipo === tipoBonifico && (!ibanBeneficiario || ibanBeneficiario.length !== 27)) {\n    setMessaggio(\"L'IBAN inserito non è valido\");\n  } else if (tipo === tipoBonifico && !contoBeneficiario) {\n    setMessaggio(\"Operazione non consentita, inserisci un IBAN valido\");\n  } else if (importo > conto.saldo) {\n    setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\n  } else {\n    const transazione = {\n      conto: {\n        ...conto\n      },\n      importo: importo,\n      tipo: tipo,\n      statoTransazione: statoTransazione,\n      contoBeneficiario: contoBeneficiario,\n      contoBeneficiarioEsterno: contoBeneficiarioEsterno\n    };\n    insertTransazione(transazione).then(response => {\n      if (response.data) {\n        setMessaggio(`La tua richiesta di ${tipoOperazione} è stata presa in carico`);\n        setVisibile2(true);\n        setIbanBeneficiario(\"\");\n        setImporto(\"\");\n      }\n    }).catch(error => {\n      if (error.response && error.response.data) {\n        setMessaggio(error.response.data);\n      } else {\n        setMessaggio(\"Errore sconosciuto\");\n      }\n      setVisibile(true);\n      setIbanBeneficiario(\"\");\n      setImporto(\"\");\n    });\n  }\n}\n_c = Operazione;\nvar _c;\n$RefreshReg$(_c, \"Operazione\");","map":{"version":3,"names":["insertTransazione","Operazione","tipoOperazione","conto","importo","ibanBeneficiario","setMessaggio","setVisibile","setVisibile2","setIbanBeneficiario","contoAggiornato","tipoDeposito","id","tipoPrelievo","tipoBonifico","tipoRicarica","tipoBollettino","tipo","statoTransazione","contoBeneficiario","contoBeneficiarioEsterno","DEPOSITO","PRELIEVO","BONIFICO","conti","find","numeroConto","RICARICA","BOLLETTINO","length","saldo","transazione","then","response","data","setImporto","catch","error","_c","$RefreshReg$"],"sources":["C:/Sviluppo/react/exobank/src/utility/Funzioni.js"],"sourcesContent":["import { insertTransazione } from \"../service/utenteService\";\r\n\r\n\r\nexport function Operazione(tipoOperazione, conto, importo, ibanBeneficiario, setMessaggio, setVisibile, setVisibile2, setIbanBeneficiario) {\r\n    const contoAggiornato = { ...conto };\r\n    const tipoDeposito = { id: 1 };\r\n    const tipoPrelievo = { id: 2 };\r\n    const tipoBonifico = { id: 3 };\r\n    const tipoRicarica = { id: 4 };\r\n    const tipoBollettino = { id: 5 };\r\n    let tipo;\r\n    let statoTransazione;\r\n    let contoBeneficiario = null;\r\n    let contoBeneficiarioEsterno = null;\r\n\r\n    switch (tipoOperazione) {\r\n        case DEPOSITO:\r\n            tipo = tipoDeposito;\r\n            statoTransazione = { id: 1 };\r\n            break;\r\n        case PRELIEVO:\r\n            tipo = tipoPrelievo;\r\n            statoTransazione = { id: 3 };\r\n            break;\r\n        case BONIFICO:\r\n            tipo = tipoBonifico;\r\n            statoTransazione = { id: 3 };\r\n            contoBeneficiario = conti.find((conti) => conti.numeroConto === ibanBeneficiario);\r\n            break;\r\n        case RICARICA:\r\n            tipo = tipoRicarica;\r\n            statoTransazione = { id: 3 };\r\n            break;\r\n        case BOLLETTINO:\r\n            tipo = tipoBollettino;\r\n            statoTransazione = { id: 3 };\r\n            contoBeneficiarioEsterno = ibanBeneficiario;\r\n            break;\r\n        default:\r\n            setMessaggio(\"Tipo di operazione non valido\");\r\n            setVisibile(true);\r\n            return;\r\n    }\r\n\r\n    if (importo <= 0) {\r\n        setMessaggio(\"Inserisci un importo positivo\");\r\n    } else if (importo >= 1000) {\r\n        setMessaggio(\"Non è possibile effettuare un'operazione superiore a € 1000.00\");\r\n    } else if (tipo === tipoBonifico && (!ibanBeneficiario || ibanBeneficiario.length !== 27)) {\r\n        setMessaggio(\"L'IBAN inserito non è valido\");\r\n    } else if (tipo === tipoBonifico && !contoBeneficiario) {\r\n        setMessaggio(\"Operazione non consentita, inserisci un IBAN valido\");\r\n    } else if (importo > conto.saldo) {\r\n        setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\r\n    } else {\r\n        const transazione = {\r\n            conto: { ...conto },\r\n            importo: importo,\r\n            tipo: tipo,\r\n            statoTransazione: statoTransazione,\r\n            contoBeneficiario: contoBeneficiario,\r\n            contoBeneficiarioEsterno: contoBeneficiarioEsterno,\r\n        };\r\n        insertTransazione(transazione)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    setMessaggio(`La tua richiesta di ${tipoOperazione} è stata presa in carico`);\r\n                    setVisibile2(true);\r\n                    setIbanBeneficiario(\"\");\r\n                    setImporto(\"\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if (error.response && error.response.data) {\r\n                    setMessaggio(error.response.data);\r\n                } else {\r\n                    setMessaggio(\"Errore sconosciuto\");\r\n                }\r\n                setVisibile(true);\r\n                setIbanBeneficiario(\"\");\r\n                setImporto(\"\");\r\n            });\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}