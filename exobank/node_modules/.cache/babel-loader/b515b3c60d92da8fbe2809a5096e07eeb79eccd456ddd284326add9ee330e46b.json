{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sviluppo\\\\react\\\\exobank\\\\src\\\\utility\\\\Funzioni.js\";\nimport { insertTransazione } from \"../service/utenteService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DEPOSITO = \"1\";\nexport const PRELIEVO = \"2\";\nexport const BONIFICO = \"3\";\nexport const RICARICA = \"4\";\nexport const BOLLETTINO = \"5\";\nexport function Operazione(tipoOperazione, conto, conti, importo, setImporto, ibanBeneficiario, setMessaggio, setVisibile, setVisibile2, setIbanBeneficiario) {\n  const contoAggiornato = {\n    ...conto\n  };\n  const tipoDeposito = {\n    id: 1,\n    nome: \"Deposito\"\n  };\n  const tipoPrelievo = {\n    id: 2,\n    nome: \"Prelievo\"\n  };\n  const tipoBonifico = {\n    id: 3,\n    nome: \"Bonifico\"\n  };\n  const tipoRicarica = {\n    id: 4,\n    nome: \"Ricarica\"\n  };\n  const tipoBollettino = {\n    id: 5,\n    nome: \"Bollettino\"\n  };\n  let tipo;\n  let statoTransazione;\n  let contoBeneficiario = null;\n  let contoBeneficiarioEsterno = null;\n\n  /*\"\r\n  computed property name\" o \"computed property\" di JavaScript, che è una caratteristica che consente di definire le chiavi degli oggetti in \r\n  modo dinamico. [DEPOSITO] è una chiave calcolata in base al valore della variabile DEPOSITO, e il valore associato a questa chiave sarà \r\n  tipoDeposito.nome. In altre parole, stai mappando il valore di DEPOSITO (che è una costante o variabile contenente il numero 1) al nome \r\n  dell'operazione associato, che è \"Deposito\" in questo caso.\r\n     */\n  const tipoNomi = {\n    [DEPOSITO]: tipoDeposito.nome,\n    [PRELIEVO]: tipoPrelievo.nome,\n    [BONIFICO]: tipoBonifico.nome,\n    [RICARICA]: tipoRicarica.nome,\n    [BOLLETTINO]: tipoBollettino.nome\n  };\n\n  /*HAI CASI GLI VIENE ASSOCIATO UN TIPO DEPOSITO.NOME QUINDI LA PROPRIETA DELL'OGGETTI TIPO DEPOSITO NOME */\n  switch (tipoOperazione) {\n    case DEPOSITO:\n      tipo = tipoDeposito;\n      statoTransazione = {\n        id: 1\n      };\n      break;\n    case PRELIEVO:\n      tipo = tipoPrelievo;\n      statoTransazione = {\n        id: 3\n      };\n      break;\n    case BONIFICO:\n      tipo = tipoBonifico;\n      statoTransazione = {\n        id: 3\n      };\n      contoBeneficiario = conti.find(conti => conti.numeroConto === ibanBeneficiario); //ESTRAE UN SINGOLO CONTO QUANDO LA COND. SI VER\n      break;\n    case RICARICA:\n      tipo = tipoRicarica;\n      statoTransazione = {\n        id: 3\n      };\n      break;\n    case BOLLETTINO:\n      tipo = tipoBollettino;\n      statoTransazione = {\n        id: 3\n      };\n      contoBeneficiarioEsterno = ibanBeneficiario.toUpperCase();\n      break;\n    default:\n      setMessaggio(\"Tipo di operazione non valido\");\n      setVisibile(true);\n      return;\n  }\n  if (importo <= 0) {\n    setMessaggio(\"Inserisci un importo positivo\");\n    setVisibile(true);\n  } else if (importo >= 1000) {\n    setMessaggio(\"Non è possibile effettuare un'operazione superiore a € 1000.00\");\n    setVisibile(true);\n  } else if (tipo === tipoBonifico && (!ibanBeneficiario || ibanBeneficiario.length !== 27)) {\n    setMessaggio(\"L'IBAN inserito non è valido\");\n    setVisibile(true);\n  } else if (tipo === tipoBonifico && !contoBeneficiario) {\n    setMessaggio(\"Operazione non consentita, inserisci un IBAN valido\");\n    setVisibile(true);\n  } else if (importo > conto.saldo) {\n    setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\n    setVisibile(true);\n  } else {\n    const transazione = {\n      conto: {\n        ...conto\n      },\n      importo: importo,\n      tipo: tipo,\n      statoTransazione: statoTransazione,\n      contoBeneficiario: contoBeneficiario,\n      contoBeneficiarioEsterno: contoBeneficiarioEsterno\n    };\n    insertTransazione(transazione).then(response => {\n      if (response.data) {\n        setMessaggio(\"La tua richiesta di \" + tipoNomi[tipoOperazione] + \" è stata presa in carico\");\n        setVisibile2(true);\n        setIbanBeneficiario(\"\");\n        setImporto(\"\");\n      }\n    }).catch(error => {\n      if (error.response && error.response.data) {\n        setMessaggio(error.response.data);\n      } else {\n        setMessaggio(\"Errore sconosciuto\");\n      }\n      setVisibile(true);\n      setIbanBeneficiario(\"\");\n      setImporto(\"\");\n    });\n  }\n}\n_c = Operazione;\nexport function errorBanner(messaggio, setMessaggio, setImporto, visibile, visibile2, setVisibile, setVisibile2) {\n  if (visibile) {\n    setTimeout(() => {\n      setImporto(\"\");\n      setVisibile(false);\n      setMessaggio(\"\");\n    }, 5000);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      className: \"error-banner\",\n      children: messaggio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this);\n  } else if (visibile2) {\n    setTimeout(() => {\n      setImporto(\"\");\n      setVisibile2(false);\n      setMessaggio(\"\");\n    }, 5000);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"green\"\n      },\n      className: \"error-banner\",\n      children: messaggio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n}\nexport function datiConto(conto) {\n  if (!conto) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Non hai un conto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginBottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Numero conto:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), \" \", conto.numeroConto]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginBottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Stato conto:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), \" \", conto.stato ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: conto.stato.statoContoCorrente\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginBottom: -10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Saldo:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), \" \\u20AC \", conto.saldo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: conto.saldo.toFixed(2)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Operazione\");","map":{"version":3,"names":["insertTransazione","jsxDEV","_jsxDEV","Fragment","_Fragment","DEPOSITO","PRELIEVO","BONIFICO","RICARICA","BOLLETTINO","Operazione","tipoOperazione","conto","conti","importo","setImporto","ibanBeneficiario","setMessaggio","setVisibile","setVisibile2","setIbanBeneficiario","contoAggiornato","tipoDeposito","id","nome","tipoPrelievo","tipoBonifico","tipoRicarica","tipoBollettino","tipo","statoTransazione","contoBeneficiario","contoBeneficiarioEsterno","tipoNomi","find","numeroConto","toUpperCase","length","saldo","transazione","then","response","data","catch","error","_c","errorBanner","messaggio","visibile","visibile2","setTimeout","style","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","datiConto","marginBottom","stato","statoContoCorrente","toFixed","$RefreshReg$"],"sources":["C:/Sviluppo/react/exobank/src/utility/Funzioni.js"],"sourcesContent":["import { insertTransazione } from \"../service/utenteService\";\r\n\r\nexport const DEPOSITO = \"1\";\r\nexport const PRELIEVO = \"2\"\r\nexport const  BONIFICO = \"3\"\r\nexport const  RICARICA = \"4\"\r\nexport const  BOLLETTINO = \"5\"\r\n\r\n\r\n\r\n\r\n\r\nexport function Operazione(tipoOperazione, conto, conti, importo, setImporto, ibanBeneficiario,setMessaggio,setVisibile,setVisibile2, setIbanBeneficiario) {\r\n    const contoAggiornato = { ...conto };\r\n    const tipoDeposito = { id: 1, nome: \"Deposito\" };\r\n    const tipoPrelievo = { id: 2, nome: \"Prelievo\" };\r\n    const tipoBonifico = { id: 3, nome: \"Bonifico\" };\r\n    const tipoRicarica = { id: 4, nome: \"Ricarica\" };\r\n    const tipoBollettino = { id: 5, nome: \"Bollettino\" };\r\n    let tipo;\r\n    let statoTransazione;\r\n    let contoBeneficiario = null;\r\n    let contoBeneficiarioEsterno = null;\r\n\r\n    /*\"\r\n    computed property name\" o \"computed property\" di JavaScript, che è una caratteristica che consente di definire le chiavi degli oggetti in \r\n    modo dinamico. [DEPOSITO] è una chiave calcolata in base al valore della variabile DEPOSITO, e il valore associato a questa chiave sarà \r\n    tipoDeposito.nome. In altre parole, stai mappando il valore di DEPOSITO (che è una costante o variabile contenente il numero 1) al nome \r\n    dell'operazione associato, che è \"Deposito\" in questo caso.\r\n\r\n     */\r\n    const tipoNomi = {\r\n        [DEPOSITO]: tipoDeposito.nome,\r\n        [PRELIEVO]: tipoPrelievo.nome,\r\n        [BONIFICO]: tipoBonifico.nome,\r\n        [RICARICA]: tipoRicarica.nome,\r\n        [BOLLETTINO]: tipoBollettino.nome,\r\n    };\r\n\r\n    /*HAI CASI GLI VIENE ASSOCIATO UN TIPO DEPOSITO.NOME QUINDI LA PROPRIETA DELL'OGGETTI TIPO DEPOSITO NOME */\r\n    switch (tipoOperazione) {\r\n        case DEPOSITO:\r\n            tipo = tipoDeposito;\r\n            statoTransazione = { id: 1 };\r\n            break;\r\n        case PRELIEVO:\r\n            tipo = tipoPrelievo;\r\n            statoTransazione = { id: 3 };\r\n            break;\r\n        case BONIFICO:\r\n            tipo = tipoBonifico;\r\n            statoTransazione = { id: 3 };\r\n            contoBeneficiario = conti.find((conti) => conti.numeroConto === ibanBeneficiario);   //ESTRAE UN SINGOLO CONTO QUANDO LA COND. SI VER\r\n            break;\r\n        case RICARICA:\r\n            tipo = tipoRicarica;\r\n            statoTransazione = { id: 3 };\r\n            break;\r\n        case BOLLETTINO:\r\n            tipo = tipoBollettino;\r\n            statoTransazione = { id: 3 };\r\n            contoBeneficiarioEsterno = ibanBeneficiario.toUpperCase();\r\n            break;\r\n        default:\r\n            setMessaggio(\"Tipo di operazione non valido\");\r\n            setVisibile(true);\r\n            return;\r\n    }\r\n\r\n    if (importo <= 0) {\r\n        setMessaggio(\"Inserisci un importo positivo\");\r\n        setVisibile(true)\r\n    } else if (importo >= 1000) {\r\n        setMessaggio(\"Non è possibile effettuare un'operazione superiore a € 1000.00\");\r\n        setVisibile(true)\r\n    } else if (tipo === tipoBonifico && (!ibanBeneficiario || ibanBeneficiario.length !== 27)) {\r\n        setMessaggio(\"L'IBAN inserito non è valido\");\r\n        setVisibile(true)\r\n    } else if (tipo === tipoBonifico && !contoBeneficiario) {\r\n        setMessaggio(\"Operazione non consentita, inserisci un IBAN valido\");\r\n        setVisibile(true)\r\n    } else if (importo > conto.saldo) {\r\n        setMessaggio(\"Operazione non consentita, importo superiore al saldo\");\r\n        setVisibile(true)\r\n    } else {\r\n        const transazione = {\r\n            conto: { ...conto },\r\n            importo: importo,\r\n            tipo: tipo,\r\n            statoTransazione: statoTransazione,\r\n            contoBeneficiario: contoBeneficiario,\r\n            contoBeneficiarioEsterno: contoBeneficiarioEsterno,\r\n        };\r\n        insertTransazione(transazione)\r\n            .then((response) => {\r\n                if (response.data) { \r\n                    setMessaggio(\"La tua richiesta di \"+tipoNomi[tipoOperazione]+ \" è stata presa in carico\");\r\n                    setVisibile2(true);\r\n                    setIbanBeneficiario(\"\");\r\n                    setImporto(\"\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if (error.response && error.response.data) {\r\n                    setMessaggio(error.response.data);\r\n                } else {\r\n                    setMessaggio(\"Errore sconosciuto\");\r\n                }\r\n                setVisibile(true);\r\n                setIbanBeneficiario(\"\");\r\n                setImporto(\"\");\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function errorBanner(messaggio,setMessaggio,setImporto,visibile,visibile2,setVisibile,setVisibile2) {\r\n    if (visibile) {\r\n        setTimeout(() => {\r\n            setImporto(\"\")\r\n            setVisibile(false);\r\n            setMessaggio(\"\");\r\n        }, 5000);\r\n        return (\r\n            <div style={{ color: \"red\" }} className=\"error-banner\">\r\n                {messaggio}\r\n            </div>\r\n        );\r\n    } else if (visibile2) {\r\n        setTimeout(() => {\r\n            setImporto(\"\")\r\n            setVisibile2(false);\r\n            setMessaggio(\"\");\r\n        }, 5000);\r\n        return (\r\n            <div style={{ color: \"green\" }} className=\"error-banner\">\r\n                {messaggio}\r\n            </div>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function datiConto(conto) {\r\n    if (!conto) {\r\n        return <p>Non hai un conto</p>;\r\n    } else {\r\n        return (\r\n            <>\r\n                <p style={{ marginBottom: 0 }}>\r\n                    <b>Numero conto:</b> {conto.numeroConto}\r\n                </p>\r\n                <p style={{ marginBottom: 0 }}>\r\n                    <b>Stato conto:</b> {(conto.stato) ? <>{conto.stato.statoContoCorrente}</> : <></>}\r\n                </p>\r\n                <p style={{ marginBottom: -10 }}>\r\n                    <b>Saldo:</b> € {(conto.saldo) ? <>{conto.saldo.toFixed(2)}</> : <></>}\r\n                </p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}